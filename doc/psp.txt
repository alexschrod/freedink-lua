# The reference material is at pspdev.org
# List of available tools and libraries:
# svn ls svn://svn.pspdev.org/psp/trunk/

mkdir psp
cd psp

# Grab the source from SVN, because the last releases are old
# (2007). It's likely that they don't make proper releases anymore.
svn co svn://svn.pspdev.org/psp/trunk/psptoolchain
cd psptoolchain

# Create the install directory
sudo mkdir /usr/local/pspdev
sudo chown `id`: /usr/local/pspdev

# Follow readme-ubuntu.txt:
cat <<'EOF' >> ~/.bashrc
export PSPDEV="/usr/local/pspdev"
export PSPSDK="$PSPDEV/psp/sdk"
export PATH="$PATH:$PSPDEV/bin:$PSPSDK/bin"
EOF
# Reload .bashrc:
. ~/.bashrc

sudo apt-get install build-essential autoconf automake bison flex \
  libncurses5-dev libreadline-dev libusb-dev texinfo libgmp3-dev   \
  libmpfr-dev subversion gcc-4.2

# try to:
#cp /usr/share/libtool/config/missing build/newlib-1.15.0
# in 004-newlib-1.15.0.sh, if it complains about 'makeinfo'

# add
#export CC=/usr/bin/gcc-4.2
# in toolchain-sudo.sh

./toolchain-sudo.sh


# Now compile libraries
# SDL
svn co svn://svn.pspdev.org/psp/trunk/SDL
pushd SDL
# Follow README.PSP:
./autogen.sh
LDFLAGS="-L$(psp-config --pspsdk-path)/lib -lc -lpspuser" \
  ./configure --host psp --prefix=$(psp-config --psp-prefix)
make
make install
popd

# SDL_mixer
svn co svn://svn.pspdev.org/psp/trunk/SDL_mixer
pushd SDL_mixer
# Follow README.PSP:
./autogen.sh
LDFLAGS="-L$(psp-config --pspsdk-path)/lib -lc -lpspuser" \
  ./configure --host psp --with-sdl-prefix=$(psp-config --psp-prefix) \
  --disable-music-mp3 --prefix=$(psp-config --psp-prefix) \
  --disable-music-libmikmod --enable-music-mod
make
make install
popd

# libjpeg (SDL_image dependency)
svn co svn://svn.pspdev.org/psp/trunk/jpeg
pushd jpeg
# Follow README.PSP:
make
make install
popd

# zlib (libpng dependency)
svn co svn://svn.pspdev.org/psp/trunk/zlib
pushd zlib
# Follow README.PSP:
make
make install
popd

# libpng (SDL_image dependency)
svn co svn://svn.pspdev.org/psp/trunk/libpng
pushd libpng
# Follow README.PSP:
# (note the presence of example PSP source code)
make
make install
popd

# SDL_image
svn co svn://svn.pspdev.org/psp/trunk/SDL_image
pushd SDL_image
# Follow README.PSP:
./autogen.sh
LDFLAGS="-L$(psp-config --pspsdk-path)/lib -lc -lpspuser" \
  ./configure --host psp --with-sdl-prefix=$(psp-config --psp-prefix) \
  --prefix=$(psp-config --psp-prefix)
make
make install
popd


# FreeType (SDL_ttf dependency)
svn co svn://svn.pspdev.org/psp/trunk/freetype
pushd freetype
# Follow README.PSP:
sh autogen.sh
LDFLAGS="-L$(psp-config --pspsdk-path)/lib -lc -lpspuser" \
   ./configure --host psp --prefix=$(psp-config --psp-prefix)
make
make install
popd

# SDL_ttf
svn co svn://svn.pspdev.org/psp/trunk/SDL_ttf
pushd SDL_ttf
# Follow README.PSP:
# Note: there's an error with libtool 2, use libtool 1.5
./autogen.sh
LDFLAGS="-L$(psp-config --pspsdk-path)/lib -lc -lpspuser" \
  ./configure --host psp --with-sdl-prefix=$(psp-config --psp-prefix) \
  --with-freetype-prefix=$(psp-config --psp-prefix) \
  --without-x --prefix=$(psp-config --psp-prefix)
make
make install
popd

# SDL_gfx
svn co svn://svn.pspdev.org/psp/trunk/SDL_gfx
pushd SDL_gfx
# Follow README.PSP:
./autogen.sh
AR=psp-ar \
  LDFLAGS="-L$(psp-config --pspsdk-path)/lib -lc -lpspuser" \
  ./configure --host psp --with-sdl-prefix=$(psp-config --psp-prefix) \
  --prefix=$(psp-config --psp-prefix) --disable-mmx --disable-shared
make
make install
popd

# libffi?
VERSION=3.0.8
wget ftp://sourceware.org/pub/libffi/libffi-$VERSION.tar.gz
tar xzf libffi-$VERSION.tar.gz
cp .../psp/SDL_ttf/config.sub ./config.sub
mkdir cross-psp && cd cross-psp
LDFLAGS="-L$(psp-config --pspsdk-path)/lib -lc -lpspuser" CFLAGS="-I$(psp-config --pspsdk-path)/include" \
  ../configure --host psp --prefix=$(psp-config --psp-prefix)
# Patch configure:
#  mipsallegrexel-psp-elf)
#        TARGET=MIPS; TARGETDIR=mips
#        ;;
make
# => doesn't detect architecture properly

# dyncall has PSP binaries, and it mentions it's using "32bit MIPS" +
# a special "eabi" calling convention...
# http://sources.redhat.com/ml/libffi-discuss/2009/msg00014.html

# ...

# FreeDink
mkdir cross-psp && cd cross-psp
# - remove /usr/local/pspdev/psp/include/getopt.h which defines non-standard constants
# - fix /usr/local/pspdev/psp/include/sys/unistd.h: readlink, 3rd argument is "unsigned int" rather then "int"
# '-G0' is needed to avoid errors such as:
#   relocation truncated to fit: R_MIPS_GPREL16 against `__ctype_ptr'
# - use HAVE_PATHCONF in pathmax.h
# - trim fchdir so it doesn't reference dup and dup2
# - alter getcwd so it doesn't use rewinddir
SDL_CONFIG=$(psp-config --psp-prefix)/bin/sdl-config \
  LDFLAGS="-L$(psp-config --pspsdk-path)/lib" \
  LIBS="-lc -lpspuser" \
  CPPFLAGS="-I$(psp-config --pspsdk-path)/include" \
  CFLAGS="-G0" \
  ../configure --host psp \
    --disable-embedded-resources --enable-static --disable-nls
# - edit gnulib/lib/strings.h and get rid of #include_next
make
cd src/
# Cf. /usr/local/pspdev/psp/sdk/lib/build.mak
psp-fixup-imports freedink -o freedink.elf
mksfo freedink PARAM.SFO
psp-strip freedink.elf -o freedink_strip.elf
pack-pbp EBOOT.PBP PARAM.SFO NULL  \
		NULL NULL NULL  \
		NULL  freedink_strip.elf NULL
rm -f freedink_strip.elf

exit

#####

Then you have a classic cross-compilation environment. There's a
PSP-specific post-compilation operation to convert the executable to a
PSP EBOOT.PBP file, as implemented in
/usr/local/pspdev/psp/sdk/lib/build.mak

The SDL version from pspdev can hide all PSP-specific code. Remember
to use -Dmain=SDL_main (or use its `sdl-config --cflags`).

Emulation: you can try "Sam", "Potemkin" (note that it requires "VC++
2005 SP1") and "PSPE". Only "Sam" worked for me, but not fully
(e.g. SDL_GetTicks() was erratic). To run a program, open EBOOT.BPB,
with external media files in the same directory. Beware: Sam allows
the game to remove files from your computer!


Links:
http://ps2dev.org/psp/Tools/Toolchain
- download the latest from their repository

http://gueux-forum.net/index.php?showtopic=77275
- complete tutorial to compile and run an homebrew, from start to finish

http://zx81.zx81.free.fr/serendipity/index.php?/categories/51-Development
- pre-compiled SDKs and GNU/Linux disk images to run in VirtualBox


Docs:

- How to detect PSP firmware version
  Parameters > System Settings > System Information
  e.g.
    3.80 M33-5 -> custom firmware
    3.80 -> official firmware

- Access recovery menu
  * long press on power / suspend (button on the right side)
  * keep R pressed (index finger button on the right)
  * press power button

- How to plug:
  * plug with a standard USB cable, outlet on the top of the PSP
  * go to Parameters -> USB Connection, press X
  * wait a few seconds
  * you can mount /dev/sdb1 like a normal USB reader
  * if this isn't done automatically, use 'pmount /dev/sdb1'
  * umount /dev/sdb1
  * press O on the PSP (don't do that before umounting, there's no check!!)

- Where to install games:
  * original phat firmware 1.50: 2 directories to install:
    /media/sdb1/PSP/GAME/__SCE__yourgame/EBOOT.PBP
    /media/sdb1/PSP/GAME/%__SCE__yourgame/EBOOT.PBP
  * newer firmware:
    /media/sdb1/PSP/GAME/yourgame/EBOOT.PBP

- Install ScummVM:
  http://wiki.scummvm.org/index.php/PlayStation_Portable
  * cp -a scummvm-0.12.0-psp/single-eboot/scummvm-0.12.0-psp /media/sdb1/PSP/GAME/
  * cp -a bass /media/sdb1/
  * mv /media/sdb1/PSP/GAME/scummvm-0.12.0-psp/sky.cpt /media/sdb1/bass/
  => v0.13 doesn't work? (quits immediately)

- Create a Pandora Battery
  http://www.pspgen.com/despertar-del-cementerio-debricker-downgrade-custom-firmware-article-184615-4.html
  * Install HellCat's Pandora Installer R4b
    cp -a hellcat-pandora-installer-4rb/PSP/GAME/pan3xx /media/sdb1/PSP/GAME/
  * MemStick and MS-IPL Options > Repartition and format MemStick (DESTRUCTIVE!) (give more space to boot sector)
    PSP S&L (all models) can boot on a JigKick, however version TA-085-v2 and later can't _create_ one anymore.
  * Battery Options > make battery Pandora
  * Install Despertar del cementerio v8 to PSP/GAME/pc8
  * Install 500.PBP (link from http://alek.dark-alex.org/pspwiki/index.php/Official_Firmware) to /

- Install screenshot-taking utility
  http://www.pspgen.com/divers/telecharger-185222.html?secours

  unzip -d /media/sdb1 pct-prx-v2_1233312675.zip
  echo "ms0:/seplugins/PCT2.PRX" >> /media/sdb1/VSH.TXT
  echo "ms0:/seplugins/PCT2.PRX" >> /media/sdb1/GAME.TXT
  echo "ms0:/seplugins/PCT2.PRX" >> /media/sdb1/GAME150.TXT
  echo "ms0:/seplugins/PCT2.PRX" >> /media/sdb1/POPS.TXT
  
  Stop the console and boot while pressing R to go to the recovery
  menu (see above) and enable the plugins.

  Press the "Notes" key to take a screenshots. I takes between 10 and
  30 seconds depending on hardware, as far as I could see on the
  forums.

- To get standard output and standart error output, in C:
  freopen("stdout.txt", "w", stdout);
  freopen("stderr.txt", "w", stderr);
  ...
  fflush(stdout); // shortly before the studied crash
  fflush(stderr);


Hardware:

- Apparently only 480x272x32

- By default the screen is a hardware surface, which means you're
  writing to the video video directly - and this also means you'll get
  a flicker effects if you don't do it properly.

- AFAIK there's hardware double-buffer mode, that is, it swaps the
  buffer's video memory on SDL_Flip(screen). Thus you need to redraw
  your screen after each flip(), unless you're not using double-buffer
  mode.

- The memory stick's path is "ms0:/" (e.g. "ms0:/PSP/GAME/yourgame")

- Accessing "/" goes to "ms0:/", at least when running homebrew from
  the memory stick. This is similar to woe's "/" -> "C:\" (replacing C
  with the current drive's letter).

- Results of testvidinfo.c from the SDL examples:
Video driver: psp
Current display: ?x?, 32 bits-per-pixel
	Red Mask = 0x00ff0000
	Green Mask = 0x0000ff00
	Blue Mask = 0x000000ff
No special fullscreen video modes
Hardware surfaces are available (0K video memory)
Copy blits between hardware surfaces are accelerated
Colorkey blits between hardware surfaces are accelerated
===================================
Setting video mode: 640x480 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
Flags didn't match: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
===================================
Setting video mode: 640x480 at 8 bpp, flags: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
Running color fill and fullscreen update test
768 fills and flips in 11.85 seconds, 64.84 FPS
Running freshly loaded blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 17.50 seconds, 28.57 FPS
Running freshly loaded cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 18.50 seconds, 27.02 FPS
Running display format blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 11.91 seconds, 41.97 FPS
Running display format cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 10.66 seconds, 46.91 FPS
===================================
Setting video mode: 640x480 at 8 bpp, flags: 0x80000001 SDL_HWSURFACE | SDL_FULLSCREEN
Setting video mode failed: No video mode large enough for 640x480
===================================
Setting video mode: 640x480 at 8 bpp, flags: 0xc0000001 SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF
Setting video mode failed: No video mode large enough for 640x480
===================================
Setting video mode: 640x480 at 16 bpp, flags: 0x00000000 SDL_SWSURFACE
Flags didn't match: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
===================================
Setting video mode: 640x480 at 16 bpp, flags: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
Running color fill and fullscreen update test
768 fills and flips in 7.59 seconds, 101.13 FPS
Running freshly loaded blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 16.14 seconds, 30.98 FPS
Running freshly loaded cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 16.45 seconds, 30.40 FPS
Running display format blit test: 408x167 at 16 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 12.62 seconds, 39.62 FPS
Running display format cc blit test: 408x167 at 16 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 10.05 seconds, 49.78 FPS
Running display format alpha blit test: 408x167 at 16 bpp, flags: 0x00010000 SDL_SWSURFACE | SDL_SRCALPHA
5000 alpha blits / 500 updates in 30.58 seconds, 16.35 FPS
Running display format cc+alpha blit test: 408x167 at 16 bpp, flags: 0x00013000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_SRCALPHA | SDL_RLEACCELOK
5000 cc+alpha blits / 500 updates in 22.79 seconds, 21.94 FPS
===================================
Setting video mode: 640x480 at 16 bpp, flags: 0x80000001 SDL_HWSURFACE | SDL_FULLSCREEN
Setting video mode failed: No video mode large enough for 640x480
===================================
Setting video mode: 640x480 at 16 bpp, flags: 0xc0000001 SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF
Setting video mode failed: No video mode large enough for 640x480
===================================
Setting video mode: 640x480 at 32 bpp, flags: 0x00000000 SDL_SWSURFACE
Flags didn't match: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
===================================
Setting video mode: 640x480 at 32 bpp, flags: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
Running color fill and fullscreen update test
768 fills and flips in 15.74 seconds, 48.80 FPS
Running freshly loaded blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 21.93 seconds, 22.80 FPS
Running freshly loaded cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 21.44 seconds, 23.32 FPS
Running display format blit test: 408x167 at 32 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 21.77 seconds, 22.97 FPS
Running display format cc blit test: 408x167 at 32 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 17.29 seconds, 28.93 FPS
Running display format alpha blit test: 408x167 at 32 bpp, flags: 0x00010000 SDL_SWSURFACE | SDL_SRCALPHA
5000 alpha blits / 500 updates in 45.06 seconds, 11.10 FPS
Running display format cc+alpha blit test: 408x167 at 32 bpp, flags: 0x00013000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_SRCALPHA | SDL_RLEACCELOK
5000 cc+alpha blits / 500 updates in 32.47 seconds, 15.40 FPS
===================================
Setting video mode: 640x480 at 32 bpp, flags: 0x80000001 SDL_HWSURFACE | SDL_FULLSCREEN
Setting video mode failed: No video mode large enough for 640x480
===================================
Setting video mode: 640x480 at 32 bpp, flags: 0xc0000001 SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF
Setting video mode failed: No video mode large enough for 640x480
===================================
Setting video mode: 800x600 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
Flags didn't match: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
===================================
Setting video mode: 800x600 at 8 bpp, flags: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
Running color fill and fullscreen update test
768 fills and flips in 18.14 seconds, 42.34 FPS
Running freshly loaded blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 21.11 seconds, 23.68 FPS
Running freshly loaded cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 22.10 seconds, 22.63 FPS
Running display format blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 15.51 seconds, 32.24 FPS
Running display format cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 14.24 seconds, 35.12 FPS
===================================
Setting video mode: 800x600 at 8 bpp, flags: 0x80000001 SDL_HWSURFACE | SDL_FULLSCREEN
Setting video mode failed: No video mode large enough for 800x600
===================================
Setting video mode: 800x600 at 8 bpp, flags: 0xc0000001 SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF
Setting video mode failed: No video mode large enough for 800x600
===================================
Setting video mode: 800x600 at 16 bpp, flags: 0x00000000 SDL_SWSURFACE
Flags didn't match: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
===================================
Setting video mode: 800x600 at 16 bpp, flags: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
Running color fill and fullscreen update test
768 fills and flips in 11.97 seconds, 64.15 FPS
Running freshly loaded blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 17.75 seconds, 28.18 FPS
Running freshly loaded cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 18.04 seconds, 27.72 FPS
Running display format blit test: 408x167 at 16 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 13.84 seconds, 36.14 FPS
Running display format cc blit test: 408x167 at 16 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 11.52 seconds, 43.40 FPS
Running display format alpha blit test: 408x167 at 16 bpp, flags: 0x00010000 SDL_SWSURFACE | SDL_SRCALPHA
5000 alpha blits / 500 updates in 31.94 seconds, 15.66 FPS
Running display format cc+alpha blit test: 408x167 at 16 bpp, flags: 0x00013000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_SRCALPHA | SDL_RLEACCELOK
5000 cc+alpha blits / 500 updates in 24.35 seconds, 20.53 FPS
===================================
Setting video mode: 800x600 at 16 bpp, flags: 0x80000001 SDL_HWSURFACE | SDL_FULLSCREEN
Setting video mode failed: No video mode large enough for 800x600
===================================
Setting video mode: 800x600 at 16 bpp, flags: 0xc0000001 SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF
Setting video mode failed: No video mode large enough for 800x600
===================================
Setting video mode: 800x600 at 32 bpp, flags: 0x00000000 SDL_SWSURFACE
Flags didn't match: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
===================================
Setting video mode: 800x600 at 32 bpp, flags: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
Running color fill and fullscreen update test
768 fills and flips in 24.33 seconds, 31.56 FPS
Running freshly loaded blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 25.48 seconds, 19.63 FPS
Running freshly loaded cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 24.95 seconds, 20.04 FPS
Running display format blit test: 408x167 at 32 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 25.32 seconds, 19.75 FPS
Running display format cc blit test: 408x167 at 32 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 20.84 seconds, 24.00 FPS
Running display format alpha blit test: 408x167 at 32 bpp, flags: 0x00010000 SDL_SWSURFACE | SDL_SRCALPHA
5000 alpha blits / 500 updates in 48.53 seconds, 10.30 FPS
Running display format cc+alpha blit test: 408x167 at 32 bpp, flags: 0x00013000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_SRCALPHA | SDL_RLEACCELOK
5000 cc+alpha blits / 500 updates in 36.02 seconds, 13.88 FPS
===================================
Setting video mode: 800x600 at 32 bpp, flags: 0x80000001 SDL_HWSURFACE | SDL_FULLSCREEN
Setting video mode failed: No video mode large enough for 800x600
===================================
Setting video mode: 800x600 at 32 bpp, flags: 0xc0000001 SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF
Setting video mode failed: No video mode large enough for 800x600
===================================
Setting video mode: 1024x768 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
Flags didn't match: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
===================================
Setting video mode: 1024x768 at 8 bpp, flags: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
Running color fill and fullscreen update test
768 fills and flips in 29.42 seconds, 26.10 FPS
Running freshly loaded blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 27.37 seconds, 18.27 FPS
Running freshly loaded cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 28.37 seconds, 17.63 FPS
Running display format blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 21.79 seconds, 22.95 FPS
Running display format cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 20.54 seconds, 24.34 FPS
===================================
Setting video mode: 1024x768 at 8 bpp, flags: 0x80000001 SDL_HWSURFACE | SDL_FULLSCREEN
Setting video mode failed: No video mode large enough for 1024x768
===================================
Setting video mode: 1024x768 at 8 bpp, flags: 0xc0000001 SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF
Setting video mode failed: No video mode large enough for 1024x768
===================================
Setting video mode: 1024x768 at 16 bpp, flags: 0x00000000 SDL_SWSURFACE
Flags didn't match: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
===================================
Setting video mode: 1024x768 at 16 bpp, flags: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
Running color fill and fullscreen update test
768 fills and flips in 20.10 seconds, 38.21 FPS
Running freshly loaded blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 21.40 seconds, 23.37 FPS
Running freshly loaded cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 21.70 seconds, 23.04 FPS
Running display format blit test: 408x167 at 16 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 17.87 seconds, 27.98 FPS
Running display format cc blit test: 408x167 at 16 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 15.29 seconds, 32.71 FPS
Running display format alpha blit test: 408x167 at 16 bpp, flags: 0x00010000 SDL_SWSURFACE | SDL_SRCALPHA
5000 alpha blits / 500 updates in 35.80 seconds, 13.97 FPS
Running display format cc+alpha blit test: 408x167 at 16 bpp, flags: 0x00013000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_SRCALPHA | SDL_RLEACCELOK
5000 cc+alpha blits / 500 updates in 28.03 seconds, 17.84 FPS
===================================
Setting video mode: 1024x768 at 16 bpp, flags: 0x80000001 SDL_HWSURFACE | SDL_FULLSCREEN
Setting video mode failed: No video mode large enough for 1024x768
===================================
Setting video mode: 1024x768 at 16 bpp, flags: 0xc0000001 SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF
Setting video mode failed: No video mode large enough for 1024x768
===================================
Setting video mode: 1024x768 at 32 bpp, flags: 0x00000000 SDL_SWSURFACE
Flags didn't match: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
===================================
Setting video mode: 1024x768 at 32 bpp, flags: 0x80000000 SDL_SWSURFACE | SDL_FULLSCREEN
Running color fill and fullscreen update test
768 fills and flips in 39.65 seconds, 19.37 FPS
Running freshly loaded blit test: 408x167 at 8 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 31.83 seconds, 15.71 FPS
Running freshly loaded cc blit test: 408x167 at 8 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 31.31 seconds, 15.97 FPS
Running display format blit test: 408x167 at 32 bpp, flags: 0x00000000 SDL_SWSURFACE
5000 blits / 500 updates in 31.65 seconds, 15.80 FPS
Running display format cc blit test: 408x167 at 32 bpp, flags: 0x00003000 SDL_SWSURFACE | SDL_SRCCOLORKEY | SDL_RLEACCELOK
5000 cc blits / 500 updates in 27.16 secon
<<output truncated here - either crash or missing stdout flush>>

- Requesting an hardware surface (SDL_HWSURFACE) fails unless it's
  480x272x32

- Requesting a fullscreen software surface
  (SDL_SWSURFACE|SDL_FULLSCREEN) succeeds in a number of situations,
  in which case the screen can be auto-resized (e.g. 640x480x32), or
  it can just be messed (overlaps).

TODO:

- can we check the inavailability of 8-bit mode in a generic way
  (rather then #ifdef _PSP)?

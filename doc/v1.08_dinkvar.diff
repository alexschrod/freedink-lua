--- dv_canonical	2008-06-26 09:24:25.000000000 +0200
+++ dv2_canonical	2008-06-29 19:45:08.000000000 +0200
@@ -32,7 +32,11 @@
 //#include "midi.h"
 
 #include <fcntl.h>
 #include <malloc.h>
+
+//redink1 moves this here so could ignore keystrokes
+
+HWND hwnd;
 void check_midi (void);
 UINT midi_id;
 
@@ -49,0 +68,0 @@
[...]
+//redink1 added for console
+
+bool mConsoleActive = false;
+//std::string mConsoleLine;
+
+unsigned int mConsoleScript = 0;
+//std::vector<std::string> mConsoleLineHistory;
+
+unsigned short int mConsoleHistoryIndex = 0;
+unsigned int mConsoleReturnValue = 0;
 void init_scripts (void);
 int load_script (char filename[15], int sprite, bool set_sprite);
 void strchar (char *string, char ch);
@@ -4117,6 +4520,24 @@
 							  0) | (spr[h].alt.
 								right != 0))
     {
+//redink1 checks for correct box stuff
+
+      if (spr[h].alt.left < 0)
+	spr[h].alt.left = 0;
+      if (spr[h].alt.left > k[getpic (h)].box.right)
+	spr[h].alt.left = k[getpic (h)].box.right;
+      if (spr[h].alt.top < 0)
+	spr[h].alt.top = 0;
+      if (spr[h].alt.top > k[getpic (h)].box.bottom)
+	spr[h].alt.top = k[getpic (h)].box.bottom;
+      if (spr[h].alt.right < 0)
+	spr[h].alt.right = 0;
+      if (spr[h].alt.right > k[getpic (h)].box.right)
+	spr[h].alt.right = k[getpic (h)].box.right;
+      if (spr[h].alt.bottom < 0)
+	spr[h].alt.bottom = 0;
+      if (spr[h].alt.bottom > k[getpic (h)].box.bottom)
+	spr[h].alt.bottom = k[getpic (h)].box.bottom;
 //spr[h].alt.bottom = 10; 
 
       box_crap->left = box_crap->left + spr[h].alt.left;
@@ -4802,6 +5391,7 @@
 bool
 get_parms (char proc_name[20], int script, char *h, int p[10])
 {
+  memset (nlist, 0, 10 * sizeof (int));
   char crap[100];
   strip_beginning_spaces (h);
   if (h[0] == '(')
@@ -5016,8 +5615,11 @@
 
 //Msg("Sprite %d's seq is %d",h,spr[h].seq);
 
-	  dderror = k[seq[h].frame[1]].k->IsLost ();
-	  if (dderror == DDERR_SURFACELOST)
+	  if (k[seq[h].frame[1]].k == NULL)
+	    {
+	      figure_out (seq[h].data, 0);
+	    }
+	  else if (k[seq[h].frame[1]].k->IsLost () == DDERR_SURFACELOST)
 	    {
 	      get_word (seq[h].data, 2, word1);
 	      reload_sprites (word1, h, 0);
@@ -5040,7 +5642,7 @@
       {
 // Msg("Smartload: Loading seq %d..", spr[h].seq);
 
-	if (seq[h].frame[1] == 0)
+	if (seq[h].frame[1] == 0 || k[seq[h].frame[1]].k == NULL)
 	  {
 	    figure_out (seq[h].data, 0);
 	  }
@@ -8019,21 +8747,8 @@
 	strcpy (s, h);
 	return (1);
       }
-    if (compare (ev[1], "unfreeze"))
+    if (compare (ev[1], "show_console"))
       {
 	h = &h[strlen (ev[1])];
-	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
-	if (get_parms (ev[1], script, h, p))
-	  {
-//Msg("UnFreeze called for %d.", nlist[0]);
-
-	    if (spr[nlist[0]].active)
-	      spr[nlist[0]].freeze = 0;
-	    else
-	      Msg
-		("Couldn't unfreeze sprite %d in script %d, it doesn't exist.",
-		 nlist[0], script);
-	  }
-	strcpy (s, h);
-	return (0);
+	mConsoleActive = true;	/*int p[20] = {1,0,0,0,0,0,0,0,0,0}; if (get_parms(ev[1], script, h, p)) { if ( nlist[0] >= 1 ) { mConsoleActive = true; } else { mConsoleActive = false; } } returnint = 0; if ( mConsoleActive ) { returnint = 1; } */
       }

--- dv_canonical	2008-06-26 09:24:25.000000000 +0200
+++ dv2_canonical	2008-06-29 19:45:08.000000000 +0200
@@ -32,7 +32,11 @@
 //#include "midi.h"
 
 #include <fcntl.h>
 #include <malloc.h>
+
+//redink1 moves this here so could ignore keystrokes
+
+HWND hwnd;
 void check_midi (void);
 UINT midi_id;
 
@@ -49,11 +68,73 @@
 
 int dinkspeed = 3;
 int last_cd;
-char current_map[255] = "MAP.DAT";
+//redink1... uh... increased these to 255? I'm honestly not quite sure. It has been a while. They might have been hard-coded, and I created char strings for them?
+
+char current_map[50] = "MAP.DAT";
+char current_dat[50] = "DINK.DAT";
 int regcode, mycode;
 time_t time_start;
 bool item_screen = false;
 bool midi_active = true;
+//redink1 lets make a new save info thing
+
+char save_game_info[200] = "Level &level";
+//redink1 added this prototype to fix this save info declaration error thing
+
+void decipher_string (char line[200], int script);
+//redink1 and invertigo tags for windowed/high color mode
+
+bool truecolor = false;
+bool dinkpal = false;
+//redink1 int for truecolor transition
+
+int iTrueColorFadeTime = 0;
+bool bFadedDown = false;
+bool smooth_follow = false;
+unsigned short (*m16BitFadeValues)[30];
+unsigned char (*m8BitFadeValues)[30];
+enum ColorDepth
+{ ColorDepth16Bit_565, ColorDepth16Bit_555, ColorDepth24Bit, ColorDepth32Bit,
+    ColorDepthNotRecognized };
+ColorDepth mColorDepth = ColorDepthNotRecognized;
+bool mSwapped = false;
+//unsigned int mTotalTime = 0;
+
+//unsigned int mTotalCount = 0;
+
+ /*typedef std::vector<DWORD> FadeValues; 
+    //std::map<DWORD, FadeValues>* mPrecalculatedFadeValues; */
+
+//redink1 added for midi looping
+
+bool mLoopMidi = false;
+//redink1 added for base push
+
+unsigned int mDinkBasePush = 310;
+//redink1 added for true-color fade, amoung other things
+
+DWORD dwRMask;
+DWORD dwGMask;
+DWORD dwBMask;
+WORD wRBits;
+WORD wGBits;
+WORD wBBits;
+WORD wRPos;
+WORD wGPos;
+WORD wBPos;
[...]
+//redink1 added for console
+
+bool mConsoleActive = false;
+//std::string mConsoleLine;
+
+unsigned int mConsoleScript = 0;
+//std::vector<std::string> mConsoleLineHistory;
+
+unsigned short int mConsoleHistoryIndex = 0;
+unsigned int mConsoleReturnValue = 0;
 void init_scripts (void);
 int load_script (char filename[15], int sprite, bool set_sprite);
 void strchar (char *string, char ch);
@@ -64,7 +147,8 @@
 DWORD killcd (HWND hWndNotify, BYTE bTrack);
 void update_status_all (void);
 int add_sprite (int x1, int y, int brain, int pseq, int pframe);
-void add_exp (int num, int h);
+void load_info ();		//redink1
+void add_exp (int num, int h, bool addEvenIfNotLastSpriteHit = false);
 bool locate (int script, char proc[20]);
 bool exist (char name[255]);
 BOOL SoundStopEffect (int sound);
@@ -96,6 +180,15 @@
 const old_burn = 0;
 int burn_revision = 0;
 bool abort_this_flip = false;
+//redink1 added for font colors
+
+struct font_color
+{
+  int red;
+  int green;
+  int blue;
+};
+font_color font_colors[16];
 struct soundstruct
 {
   bool repeat;
@@ -153,7 +246,7 @@
   int timer;
 };
 talk_struct talk;
-char last_midi[15];
+char last_midi[15] = "";
 struct idata
 {
   int type;
@@ -172,7 +265,7 @@
 int flife, fexp, fstrength, fdefense, fgold, fmagic, fmagic_level, flifemax,
   fraise, last_magic_draw;
 int fcur_weapon, fcur_magic;
-const max_idata = 600;
+const max_idata = 1000;		//redink1
 int mbase_timing;
 idata id[max_idata];
 DWORD mold;
@@ -420,6 +543,12 @@
   int nodraw;
   int frame_delay;
   int picfreeze;
+//redink1
+
+  int bloodseq;
+  int bloodnum;
+// std::map<std::string, int>* custom;
+
 };
 struct seth_joy
 {
@@ -607,6 +736,7 @@
 LPDIRECTDRAWSURFACE lpDDSTwo = NULL;	// Offscreen surface 2
 LPDIRECTDRAWSURFACE lpDDSTrick = NULL;	// Offscreen surface 2
 LPDIRECTDRAWSURFACE lpDDSTrick2 = NULL;	// Offscreen surface 2
+LPDIRECTDRAWSURFACE lpDDSFade = NULL;	//redink1 surface for true-color fade-downs
 bool trig_man = false;
 bool total_trigger = false;
 bool debug_mode = false;
@@ -635,7 +765,8 @@
 BYTE torusColors[256];		// Marks the colors used in the torus
 HWND hWndMain = NULL;
 JOYINFOEX jinfo;		//joystick info
-BOOL joystick = false;
+BOOL joystick = FALSE;
+BOOL disablejoystick = FALSE;
 hardness hmap;
 RECT tilerect[tile_screens];
 void
@@ -1940,10 +2089,15 @@
 	  hm.x[x1].y[y1] = get_hard_map (0, x1, y1);
 }}} void
 
-add_exp (int num, int h)
+add_exp (int num, int h, bool addEvenIfNotLastSpriteHit)
+{
+//redink1 fix - made work with all sprites when using add_exp DinkC command
+
+  if (addEvenIfNotLastSpriteHit == false)
 {
   if (spr[h].last_hit != 1)
     return;
+    }
   if (num > 0)
     {
 //add experience
@@ -2137,6 +2291,14 @@
       Msg ("Cannot find %s file!!!", current_map);
       return;
     }
+//redink1 set correctly so Dink appears on mini-map for warps and such
+
+//doesn't work, because 'num' is actually the offset in map.dat, not the map screen number
+
+//if (map.indoor[num] == 0)
+
+// play.last_map = num;
+
   lsize = sizeof (struct small_map);
   holdme = (lsize * (num - 1));
   fseek (fp, holdme, SEEK_SET);
@@ -2149,6 +2311,7 @@
     Msg ("ERROR: Couldn't read map %d?!?", num);
   fclose (fp);
   spr[1].move_active = false;
+  spr[1].move_nohard = false;
   spr[1].freeze = false;
   screenlock = 0;
   fill_whole_hard ();
@@ -2183,7 +2346,9 @@
 {
   FILE *fp;
   char crap[80];
-  sprintf (crap, "DINK.DAT");
+//redink1
+
+  sprintf (crap, current_dat);
   fp = fopen (crap, "wb");
   fwrite (&map, sizeof (struct map_info), 1, fp);
   fclose (fp);
@@ -2193,6 +2358,9 @@
 {
   FILE *fp;
   char crap[80];
+//redink1 created this
+
+  char info_temp[200];
 //lets set some vars first
 
   play.x = spr[1].x;
@@ -2216,7 +2384,17 @@
   play.base_idle = spr[1].base_idle;
   play.base_walk = spr[1].base_walk;
   play.base_hit = spr[1].base_hit;
-  sprintf (play.gameinfo, "Level %d", *plevel);
+//redink1 - save game things for storing new map, palette, and tile information
+
+  strncpy (play.mapdat, current_map, 50);
+  strncpy (play.dinkdat, current_dat, 50);
+//redink1 code for custom save game names
+
+  strcpy (info_temp, save_game_info);
+  decipher_string (info_temp, 0);
+  strncpy (play.gameinfo, info_temp, 77);
+//sprintf(play.gameinfo, "Level %d",*plevel);
+
   last_saved_game = num;
   sprintf (crap, "SAVE%d.DAT", num);
   fp = fopen (crap, "wb");
@@ -2370,6 +2548,59 @@
     {
       fread (&play, sizeof (play), 1, fp);
       fclose (fp);
+//redink1 - new map, if exist
+
+      if (strlen (play.mapdat) > 0 && strlen (play.dinkdat) > 0)
+	{
+	  strcpy (current_map, play.mapdat);
+	  strcpy (current_dat, play.dinkdat);
+	  load_info ();
+	}
+//redink1 - load palette
+
+      if (strlen (play.palette) > 0)
+	{
+	  LPDIRECTDRAWSURFACE oldTrick =
+	    DDLoadBitmap (lpDD, play.palette, 0, 0);
+	  lpDDPal = DDLoadPalette (lpDD, play.palette);
+	  if (lpDDPal)
+	    {
+	      lpDDSPrimary->SetPalette (lpDDPal);
+	      lpDDPal->GetEntries (0, 0, 256, pe);
+	      lpDDPal->GetEntries (0, 0, 256, real_pal);
+	    }
+	  oldTrick->Release ();
+	}
+//redink1 - reload tiles
+
+      char tile[50];
+      for (int i = 1; i <= 41; i++)
+	{
+//Need to unload old tiles...
+
+	  tiles[i]->Release ();
+//Which tiles are we loading, new or default?
+
+	  if (strlen (play.tile[i].file) > 0)
+	    {
+//Check the original directory
+
+	      if (!exist (play.tile[i].file))
+		sprintf (tile, "..\\DINK\\%s", play.tile[i].file);
+	      else
+		strcpy (tile, play.tile[i].file);
+	    }
+	  else
+	    {
+	      sprintf (tile, "tiles\\TS%02d.bmp", i);
+	      if (!exist (tile))
+		sprintf (tile, "..\\dink\\tiles\\TS%02d.BMP", i);
+	    }
+//Load in the tiles...
+
+	  tiles[i] = DDTileLoad (lpDD, tile, 0, 0, i);
+	  DDSetColorKey (tiles[i], RGB (0, 0, 0));
+	}
       spr[1].damage = 0;
       spr[1].x = play.x;
       spr[1].y = play.y;
@@ -2443,6 +2677,11 @@
       Msg ("Loaded map.");
       draw_map_game ();
       Msg ("Map drawn.");
+//redink1 fixes
+
+      fexp = *pexper;
+      draw_status_all ();
+      Msg ("Status drawn.");
       last_saved_game = num;
       return (true);
     }
@@ -2606,14 +2845,14 @@
 load_info (void)
 {
   FILE *fp;
-  char crap[80];
-  sprintf (crap, "DINK.DAT");
-  fp = fopen (crap, "rb");
+//redink1 changed 'crap' to 'current_dat'
+
+  fp = fopen (current_dat, "rb");
   if (!fp)
     {
 //fclose(fp);
 
-      fp = fopen (crap, "wb");
+      fp = fopen (current_dat, "wb");
 //make new data file
 
       strcpy (map.name, "Smallwood");
@@ -2723,6 +2962,8 @@
   return psurf;
 }				/* DDCreateSurface */
 
+//redink1 and Invertigo fix for windowed/true color mode
+
 void
 load_sprite_pak (char org[100], int nummy, int speed, int xoffset,
 		 int yoffset, RECT hardbox, bool notanim, bool black,
@@ -2738,6 +2979,7 @@
   DDCOLORKEY ddck;
   int x, y, dib_pitch;
   BYTE *src, *dst;
+  DWORD ddst;
   char fname[20];
   LPTSTR dump;
 //IDirectDrawSurface *pdds;
@@ -2829,16 +3071,50 @@
 
 	      return;
 	    }
+//redink1 modified this to work with every color depth
+
+//Ok, what we do here is take each color, shift it right to get rid of any
+
+//lower-order bits that we don't use, then shift it left to go to the correct
+
+//position. Should work fine with 16-24-32 bit color depth.
+
+#define _RGBXBIT(r, g, b) ( (r >> (8 - wRBits) << wRPos) | (g >> (8 - wGBits) << wGPos) | (b >> (8 - wBBits) << wBPos) )
+	  PALETTEENTRY ape[256];
+	  DWORD dwBlack;
+	  DWORD dwNearBlack;
+	  DWORD dwWhite;
+	  DWORD dwNearWhite;
+	  if (truecolor)
+	    {
+	      if (dinkpal)
+		{
+		  memcpy (ape, real_pal, sizeof (PALETTEENTRY) * 256);
+		}
+	      else
+		{
+		  byte *palzor = (byte *) pbf + 54;
+		  for (int pcount = 0; pcount < 256; pcount++)
+		    {
+		      ape[pcount].peRed = palzor[pcount * 4 + 2];
+		      ape[pcount].peGreen = palzor[pcount * 4 + 1];
+		      ape[pcount].peBlue = palzor[pcount * 4];
+		}} dwBlack =
+		_RGBXBIT (ape[255].peRed, ape[255].peGreen, ape[255].peBlue);
+	      dwNearBlack =
+		_RGBXBIT (ape[249].peRed, ape[255].peGreen, ape[255].peBlue);
+	      dwWhite =
+		_RGBXBIT (ape[0].peRed, ape[0].peGreen, ape[0].peBlue);
+	      dwNearWhite =
+		_RGBXBIT (ape[30].peRed, ape[30].peGreen, ape[30].peBlue);
+	    }
 	  byte *pic;
 	  pic = (byte *) pbf + 1078;
 //Msg("Pic's size is now %d.",sizeof(pic));
 
-	  bm.bmWidth = pbi->biWidth;
-	  bm.bmHeight = pbi->biHeight;
-	  bm.bmWidthBytes = 32;
-	  bm.bmPlanes = pbi->biPlanes;
-	  bm.bmBitsPixel = pbi->biBitCount;
-	  bm.bmBits = pic;
+//redink1 THIS DOESN'T DO ANYTHING!!!! ARGHAGHARHA!
+
+	  /*bm.bmWidth = pbi->biWidth; bm.bmHeight = pbi->biHeight; bm.bmWidthBytes = 32; bm.bmPlanes = pbi->biPlanes; bm.bmBitsPixel = pbi->biBitCount; bm.bmBits = pic; */
 //
 
 // create a DirectDrawSurface for this bitmap
@@ -2850,7 +3126,7 @@
 	  ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH;
 	  ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_SYSTEMMEMORY;
 	  ddsd.dwWidth = pbi->biWidth;
-	  ddsd.dwHeight = pbi->biHeight;
+	  ddsd.dwHeight = pbi->biHeight;	// + 1; //redink1 fixed crashing in 16-bit mode... would overflow by a byte or two by writing dwords, really weird bug. Eh, actually moved solution to everywhere we update a DWORD, include any trailing bits that were there before. Saves memory.
 	  if (k[sprite].k != NULL)
 	    k[sprite].k->Release ();
 	  if (lpDD->CreateSurface (&ddsd, &k[sprite].k, NULL) != DD_OK)
@@ -2868,6 +3144,9 @@
 		  dib_pitch = (pbi->biWidth + 3) & ~3;
 		  src = (BYTE *) pic + dib_pitch * (pbi->biHeight - 1);
 		  dst = (BYTE *) ddsd.lpSurface;
+		  ddst = (DWORD) ddsd.lpSurface;
+		  int bytesPerPixel = ddsd.ddpfPixelFormat.dwRGBBitCount >> 3;	//Divide by 8, basically
+		  DWORD dwPixel;
 		  if (leftalign)
 		    {
 //Msg("left aligning..");
@@ -2876,6 +3155,30 @@
 			{
 			  for (x = 0; x < (int) pbi->biWidth; x++)
 			    {
+			      if (truecolor)
+				{
+				  dwPixel =
+				    _RGBXBIT (ape[src[x]].peRed,
+					      ape[src[x]].peGreen,
+					      ape[src[x]].peBlue);
+				  if (dwPixel == dwBlack)
+				    {
+// Msg("Found a 255...");
+
+				      dwPixel = dwNearBlack;
+				    }
+				  else if (dwPixel == dwWhite)
+				    {
+				      dwPixel = dwNearWhite;
+				    }
+//Make sure to or it with the rest of the DWORD present, just in case it overflows the buffer
+
+				  *((DWORD *) ddst) =
+				    dwPixel | *((DWORD *) ddst) & ~dwWhite;
+				  ddst += bytesPerPixel;
+				}
+			      else
+				{
 			      dst[x] = src[x];
 			      if (dst[x] == 0)
 				{
@@ -2888,26 +3191,57 @@
 				  dst[x] = 249;
 				}
 			    }
+			    }
+//redink1 switched to 'better' version
+
+			  ((DWORD) ddst) += ddsd.lPitch - ((int) pbi->biWidth) * bytesPerPixel;	//ddst += ddsd.lPitch / 4;
 			  dst += ddsd.lPitch;
 			  src -= dib_pitch;
-			}
-		    }
+		    }}
 		  else if (black)
 		    {
 		      for (y = 0; y < (int) pbi->biHeight; y++)
 			{
 			  for (x = 0; x < (int) pbi->biWidth; x++)
 			    {
+			      if (truecolor)
+				{
+				  dwPixel =
+				    _RGBXBIT (ape[src[x]].peRed,
+					      ape[src[x]].peGreen,
+					      ape[src[x]].peBlue);
+				  if (dwPixel == dwWhite)
+				    {
+// Msg("Found a 255...");
+
+				      dwPixel = dwNearWhite;
+				    }
+				  else if (dwPixel == dwBlack)
+				    {
+				      dwPixel = dwWhite;
+				    }
+				  *((DWORD *) ddst) =
+				    dwPixel | *((DWORD *) ddst) & ~dwWhite;;
+				  ddst += bytesPerPixel;	/*ddst[x] = _RGB24BIT(ape[src[x]].peRed, ape[src[x]].peGreen, ape[src[x]].peBlue); if (ddst[x] == _RGB24BIT(ape[0].peRed, ape[0].peGreen, ape[0].peBlue)) { 
+								   // Msg("Found a 255...");
+
+								   ddst[x] = _RGB24BIT(ape[30].peRed, ape[30].peGreen, ape[30].peBlue); } if (!dinkpal) { if (ddst[x] == _RGB24BIT(ape[255].peRed, ape[255].peGreen, ape[255].peBlue)) { ddst[x] = _RGB24BIT(ape[0].peRed, ape[0].peGreen, ape[0].peBlue); } } */
+				}
+			      else
+				{
 			      dst[x] = src[x];
 			      if (dst[x] == 0)
 				{
 				  dst[x] = 30;
 				}
 			    }
+			    }
+//redink1 switched to 'better' version
+
+			  ((DWORD) ddst) += ddsd.lPitch - ((int) pbi->biWidth) * bytesPerPixel;	//
 			  dst += ddsd.lPitch;
 			  src -= dib_pitch;
-			}
-		    }
+		    }}
 		  else
 		    {
 //doing white
@@ -2916,6 +3250,28 @@
 			{
 			  for (x = 0; x < (int) pbi->biWidth; x++)
 			    {
+			      if (truecolor)
+				{
+				  dwPixel =
+				    _RGBXBIT (ape[src[x]].peRed,
+					      ape[src[x]].peGreen,
+					      ape[src[x]].peBlue);
+				  if (dwPixel == dwBlack)
+				    {
+// Msg("Found a 255...");
+
+				      dwPixel = dwNearBlack;
+				    }
+				  else if (dwPixel == dwWhite)
+				    {
+				      dwPixel = dwBlack;
+				    }
+				  *((DWORD *) ddst) =
+				    dwPixel | *((DWORD *) ddst) & ~dwWhite;;
+				  ddst += bytesPerPixel;	/*ddst[x] = _RGB24BIT(ape[src[x]].peRed, ape[src[x]].peGreen, ape[src[x]].peBlue); if (ddst[x] == _RGB24BIT(ape[255].peRed, ape[255].peGreen, ape[255].peBlue)) { ddst[x] = _RGB24BIT(ape[249].peRed, ape[249].peGreen, ape[249].peBlue); } if (!dinkpal) { if (ddst[x] == _RGB24BIT(ape[0].peRed, ape[0].peGreen, ape[0].peBlue)) { ddst[x] = _RGB24BIT(ape[255].peRed, ape[255].peGreen, ape[255].peBlue); } } */
+				}
+			      else
+				{
 			      dst[x] = src[x];
 			      if (dst[x] == 255)
 				{
@@ -2924,11 +3280,13 @@
 				  dst[x] = 249;
 				}
 			    }
+			    }
+//redink1 switched to 'better' version
+
+			  ((DWORD) ddst) += ddsd.lPitch - ((int) pbi->biWidth) * bytesPerPixel;	//ddst += ddsd.lPitch / 4;
 			  dst += ddsd.lPitch;
 			  src -= dib_pitch;
-			}
-		    }
-		  IDirectDrawSurface_Unlock (k[sprite].k, NULL);
+		    }} IDirectDrawSurface_Unlock (k[sprite].k, NULL);
 		}
 	      else
 		{
@@ -3976,7 +4359,14 @@
   if (ddrval == DDERR_WASSTILLDRAWING)
     goto again3;
   fraise = next_raise ();
+  if (*pexper < fraise)
+    {
   fexp = *pexper;
+    }
+  else
+    {
+      fexp = fraise - 1;
+    }
   fstrength = *pstrength;
   fmagic = *pmagic;
   fgold = *pgold;
@@ -3992,10 +4382,10 @@
   draw_icons ();
   if (*pmagic_cost > 0)
     if (*pmagic_level > 0)
-      draw_mlevel (*pmagic_level / (*pmagic_cost / 100));
-}
+      draw_mlevel (*pmagic_level / static_cast <
+		   double >(*pmagic_cost) / 100.0);
+} bool
 
-bool
 inside_box (int x1, int y1, RECT box)
 {
   if (x1 > box.right)
@@ -4054,6 +4444,15 @@
 	  spr[x].strength = 0;
 	  spr[x].damage = 0;
 	  spr[x].defense = 0;
+	  if (spr[x].custom == NULL)
+	    {
+// spr[x].custom = new std::map<std::string, int>;
+
+	    }
+	  else
+	    {
+	      spr[x].custom->clear ();
+	    }
 	  return (x);
 	}
     }
@@ -4065,8 +4464,6 @@
 {
   RECT math;
   int sz, sy, x_offset, y_offset;
-  int txoffset = k[getpic (h)].xoffset;
-  int tyoffset = k[getpic (h)].yoffset;
   int mplayx = playx;
   int mplayl = playl;
   int mplayy = playy;
@@ -4085,9 +4482,15 @@
       else
 	Msg ("Yo, sprite %d has a bad pic. (Map %d) Seq %d, Frame %d", h,
 	     *pmap, spr[h].pseq, spr[h].pframe);
+//redink1 added to fix frame-not-in-memory immediately
+
+      if (spr[h].pseq != 0)
+	check_seq_status (spr[h].pseq);
 //spr[h].pic = 44;
 
     }
+  int txoffset = k[getpic (h)].xoffset;
+  int tyoffset = k[getpic (h)].yoffset;
   *box_real = k[getpic (h)].box;
   CopyRect (&krect, &k[getpic (h)].box);
   if (spr[h].size != 100)
@@ -4117,6 +4520,24 @@
 							  0) | (spr[h].alt.
 								right != 0))
     {
+//redink1 checks for correct box stuff
+
+      if (spr[h].alt.left < 0)
+	spr[h].alt.left = 0;
+      if (spr[h].alt.left > k[getpic (h)].box.right)
+	spr[h].alt.left = k[getpic (h)].box.right;
+      if (spr[h].alt.top < 0)
+	spr[h].alt.top = 0;
+      if (spr[h].alt.top > k[getpic (h)].box.bottom)
+	spr[h].alt.top = k[getpic (h)].box.bottom;
+      if (spr[h].alt.right < 0)
+	spr[h].alt.right = 0;
+      if (spr[h].alt.right > k[getpic (h)].box.right)
+	spr[h].alt.right = k[getpic (h)].box.right;
+      if (spr[h].alt.bottom < 0)
+	spr[h].alt.bottom = 0;
+      if (spr[h].alt.bottom > k[getpic (h)].box.bottom)
+	spr[h].alt.bottom = k[getpic (h)].box.bottom;
 //spr[h].alt.bottom = 10; 
 
       box_crap->left = box_crap->left + spr[h].alt.left;
@@ -4651,6 +5072,7 @@
 	      if (rinfo[script]->sprite != 1000)
 		{
 		  spr[rinfo[script]->sprite].move_active = false;
+		  spr[rinfo[script]->sprite].move_nohard = false;
 		}
 	      rinfo[script]->skipnext = false;
 	      rinfo[script]->onlevel = 0;
@@ -4728,29 +5202,142 @@
     }
 }
 
@@ -4802,6 +5391,7 @@
 bool
 get_parms (char proc_name[20], int script, char *h, int p[10])
 {
+  memset (nlist, 0, 10 * sizeof (int));
   char crap[100];
   strip_beginning_spaces (h);
   if (h[0] == '(')
@@ -4954,6 +5544,15 @@
 	  spr[x].damage = 0;
 	  spr[x].defense = 0;
 	  spr[x].hard = 1;
+	  if (spr[x].custom == NULL)
+	    {
+// spr[x].custom = new std::map<std::string, int>;
+
+	    }
+	  else
+	    {
+	      spr[x].custom->clear ();
+	    }
 	  return (x);
 	}
     }
@@ -5016,8 +5615,11 @@
 
 //Msg("Sprite %d's seq is %d",h,spr[h].seq);
 
-	  dderror = k[seq[h].frame[1]].k->IsLost ();
-	  if (dderror == DDERR_SURFACELOST)
+	  if (k[seq[h].frame[1]].k == NULL)
+	    {
+	      figure_out (seq[h].data, 0);
+	    }
+	  else if (k[seq[h].frame[1]].k->IsLost () == DDERR_SURFACELOST)
 	    {
 	      get_word (seq[h].data, 2, word1);
 	      reload_sprites (word1, h, 0);
@@ -5040,7 +5642,7 @@
       {
 // Msg("Smartload: Loading seq %d..", spr[h].seq);
 
-	if (seq[h].frame[1] == 0)
+	if (seq[h].frame[1] == 0 || k[seq[h].frame[1]].k == NULL)
 	  {
 	    figure_out (seq[h].data, 0);
 	  }
@@ -5050,8 +5652,7 @@
 
 //Msg("Sprite %d's seq is %d",h,spr[h].seq);
 
-	    dderror = k[seq[h].frame[1]].k->IsLost ();
-	    if (dderror == DDERR_SURFACELOST)
+	    if (k[seq[h].frame[1]].k->IsLost () == DDERR_SURFACELOST)
 	      {
 		get_word (seq[h].data, 2, word1);
 		reload_sprites (word1, h, 0);
@@ -6352,7 +7029,14 @@
   return (*change);
 }
 
-int
+//redink1 added for long values
+
+long
+change_sprite (int h, int val, long *change)
+{
+  return (long) change_sprite (h, val, (int *) change);
+} int
+
 change_edit (int h, int val, unsigned short *change)
 {
 //Msg("Searching sprite %s with val %d. Cur is %d", h, val, *change);
@@ -6414,6 +7098,14 @@
   ddbltfx.dwSize = sizeof (ddbltfx);
   ddbltfx.dwFillColor = 0;
   if (get_box (h, &box_crap, &box_real))
+    {
+//redink1 error checking for invalid rectangle
+
+      if (box_crap.left >= box_crap.right || box_crap.top >= box_crap.bottom)
+	return;
+//redink1 error checking for out-of-bounds clipping
+
+      /*if (box_crap.left < 0) box_crap.left = 0; if (box_crap.top < box_real.top) box_crap.top = box_crap.top; if (box_crap.right > box_real.right) box_crap.right = box_real.right; if (box_crap.bottom > box_real.bottom) box_crap.bottom = box_real.bottom; */
     while (1)
       {
 // Msg("Box_crap: %d %d %d %d, Box_real: %d %d %d %d",box_crap.left,box_crap.top,
@@ -6446,6 +7138,7 @@
 	  }
       }
 }
+}
 
 void
 changedir (int dir1, int k, int base)
@@ -6683,6 +7376,9 @@
     }
   if (*pexper != fexp)
     {
+      if ((talk.active == false && item_screen == false && spr[1].freeze == 0)
+	  || fexp + 10 < fraise)
+	{
 //update screen experience
 
       fexp += 10;
@@ -6701,6 +7397,7 @@
 	    run_script (script);
 	}
     }
+    }
   if (drawexp)
     {
       draw_exp ();
@@ -6776,7 +7473,12 @@
   if (*pmagic_cost > 0)
     if (*pmagic_level > 0)
       {
-	int mnum = *pmagic_level / (*pmagic_cost / 100);
+	double mnumd = *pmagic_level;
+	mnumd *= 100;
+	mnumd /= *pmagic_cost;
+	int mnum = static_cast < int >(mnumd);
+//int mnum = *pmagic_level / (*pmagic_cost / 100);
+
 	if (mnum != last_magic_draw)
 	  {
 	    draw_mlevel (mnum);
@@ -7317,11 +8020,23 @@
 void
 random_blood (int mx, int my, int h)
 {
+//if ((rand() % 2) == 1) myseq = 188; else myseq = 187;
+
+//redink1 - customizable blood depending on what sprite we hit!!
+
   int myseq;
-  if ((rand () % 2) == 1)
-    myseq = 188;
+  int randy;
+  if (spr[h].bloodseq > 0 && spr[h].bloodnum > 0)
+    {
+      myseq = spr[h].bloodseq;
+      randy = spr[h].bloodnum;
+    }
   else
+    {
     myseq = 187;
+      randy = 3;
+    }
+  myseq += (rand () % randy);
   int crap2 = add_sprite (mx, my, 5, myseq, 1);
   spr[crap2].speed = 0;
   spr[crap2].base_walk = -1;
@@ -7669,6 +8384,16 @@
   DDBLTFX ddbltfx;
   ZeroMemory (&ddbltfx, sizeof (ddbltfx));
   ddbltfx.dwSize = sizeof (ddbltfx);
+//redink1 fix for correct fill_screen colors in truecolor mode
+
+  if (truecolor)
+    {
+      lpDDPal->GetEntries (0, 0, 256, pe);
+      ddbltfx.dwFillColor =
+	pe[num].peBlue << wBPos | pe[num].peGreen << wGPos | pe[num].
+	peRed << wRPos;
+    }
+  else
   ddbltfx.dwFillColor = num;
   crap =
     lpDDSTwo->Blt (NULL, NULL, NULL, DDBLT_COLORFILL | DDBLT_WAIT, &ddbltfx);
@@ -8019,129 +8747,150 @@
 	strcpy (s, h);
 	return (1);
       }
-    if (compare (ev[1], "unfreeze"))
+    if (compare (ev[1], "show_console"))
       {
 	h = &h[strlen (ev[1])];
-	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
-	if (get_parms (ev[1], script, h, p))
-	  {
-//Msg("UnFreeze called for %d.", nlist[0]);
-
-	    if (spr[nlist[0]].active)
-	      spr[nlist[0]].freeze = 0;
-	    else
-	      Msg
-		("Couldn't unfreeze sprite %d in script %d, it doesn't exist.",
-		 nlist[0], script);
-	  }
-	strcpy (s, h);
-	return (0);
+	mConsoleActive = true;	/*int p[20] = {1,0,0,0,0,0,0,0,0,0}; if (get_parms(ev[1], script, h, p)) { if ( nlist[0] >= 1 ) { mConsoleActive = true; } else { mConsoleActive = false; } } returnint = 0; if ( mConsoleActive ) { returnint = 1; } */
       }
-    if (compare (ev[1], "freeze"))
-      {
-//Msg("Freeze called (%s)", h); 
+//redink1 - sets font color
 
-	h = &h[strlen (ev[1])];
-	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
-	if (get_parms (ev[1], script, h, p))
-	  {
-	    if (spr[nlist[0]].active)
-	      spr[nlist[0]].freeze = script;
-	    else
-	      Msg
-		("Couldn't freeze sprite %d in script %d, it doesn't exist.",
-		 nlist[0], script);
-	  }
-	strcpy (s, h);
-	return (0);
-      }
-    if (compare (ev[1], "set_callback_random"))
+    if (compare (ev[1], "set_font_color"))
       {
-	Msg ("setting callback random");
 	h = &h[strlen (ev[1])];
-	int p[20] = { 2, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
+	int p[20] = { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 };
 	if (get_parms (ev[1], script, h, p))
 	  {
-	    int cb = add_callback (slist[0], nlist[1], nlist[2], script);
-//got all parms, let do it
-
+	    if (nlist[0] >= 1 && nlist[0] <= 15 && nlist[1] >= 0
+		&& nlist[1] <= 255 && nlist[2] >= 0 && nlist[2] <= 255
+		&& nlist[3] >= 0 && nlist[3] <= 255)
+	      {
+		font_colors[nlist[0]].red = nlist[1];
+		font_colors[nlist[0]].green = nlist[2];
+		font_colors[nlist[0]].blue = nlist[3];
+	      }
 	  }
 	strcpy (s, h);
 	return (0);
       }
-    if (compare (ev[1], "set_dink_speed"))
+//redink1 - clears the editor information, useful for save games and such
+
+    if (compare (ev[1], "clear_editor_info"))
       {
-	Msg ("setting callback random");
 	h = &h[strlen (ev[1])];
-	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
-	if (get_parms (ev[1], script, h, p))
+	for (int i = 0; i < 769; i++)
 	  {
-	    dinkspeed = nlist[0];
-	  }
-	strcpy (s, h);
+	    for (int j = 0; j < 100; j++)
+	      {
+		play.spmap[i].seq[j] = 0;
+		play.spmap[i].frame[j] = 0;
+		play.spmap[i].type[j] = 0;
+		play.spmap[i].last_time = 0;
+	  }} returnint = 1;
 	return (0);
       }
-    if (compare (ev[1], "reset_timer"))
+//redink1 - returns the number of variables used
+
+    if (compare (ev[1], "var_used"))
       {
 	h = &h[strlen (ev[1])];
-	time (&time_start);
-	play.minutes = 0;
-	strcpy (s, h);
+	int m = 0;
+	for (int i = 1; i < max_vars; i++)
+	  if (play.var[i].active == true)
+	    m++;
+	returnint = m;
 	return (0);
       }
-    if (compare (ev[1], "set_keep_mouse"))
+//redink1 added this function to load a new map/dink.dat
+
+    if (compare (ev[1], "load_map"))
       {
-	Msg ("setting callback random");
 	h = &h[strlen (ev[1])];
-	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	int p[20] = { 2, 2, 0, 0, 0, 0, 0, 0, 0, 0 };
 	if (get_parms (ev[1], script, h, p))
 	  {
-	    keep_mouse = nlist[0];
+	    strcpy (current_map, slist[0]);
+	    strcpy (current_dat, slist[1]);
+	    load_info ();
 	  }
 	strcpy (s, h);
 	return (0);
       }
-    if (compare (ev[1], "add_item"))
+//redink1 added this function to load a pallete from any bmp
+
+    if (compare (ev[1], "load_palette"))
       {
 	h = &h[strlen (ev[1])];
-	int p[20] = { 2, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
+	int p[20] = { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 	if (get_parms (ev[1], script, h, p))
 	  {
-	    add_item (slist[0], nlist[1], nlist[2], false);
+	    if (exist (slist[0]))
+	      {
+		LPDIRECTDRAWSURFACE oldTrick =
+		  DDLoadBitmap (lpDD, slist[0], 0, 0);
+		lpDDPal = DDLoadPalette (lpDD, slist[0]);
+		if (lpDDPal)
+		  {
+		    lpDDSPrimary->SetPalette (lpDDPal);
+		    lpDDPal->GetEntries (0, 0, 256, pe);
+		    lpDDPal->GetEntries (0, 0, 256, real_pal);
+//Store in save game
+
+		    strncpy (play.palette, slist[0], 50);
+		  }
+		oldTrick->Release ();
+	      }
 	  }
 	strcpy (s, h);
 	return (0);
       }
-    if (compare (ev[1], "add_exp"))
+//redink1 added this function to load new tiles, because he is a l33t guy
+
+    if (compare (ev[1], "load_tile"))
       {
 	h = &h[strlen (ev[1])];
-	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	int p[20] = { 2, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
 	if (get_parms (ev[1], script, h, p))
 	  {
-	    add_exp (nlist[0], nlist[1]);
+	    if (!exist (slist[0]))
+	      {
+		sprintf (slist[0], "..\\DINK\\%s", slist[0]);
+	      }
+	    if (exist (slist[0]) && nlist[1] > 0 && nlist[1] < tile_screens)
+	      {
+//Need to unload old tiles...
+
+		tiles[nlist[1]]->Release ();
+//Load in the new tiles...
+
+		tiles[nlist[1]] = DDTileLoad (lpDD, slist[0], 0, 0, nlist[1]);
+		DDSetColorKey (tiles[nlist[1]], RGB (0, 0, 0));
+//Store in save game
+
+		strncpy (play.tile[nlist[1]].file, slist[0], 50);
+	      }
 	  }
 	strcpy (s, h);
 	return (0);
       }
-    if (compare (ev[1], "add_magic"))
+//redink1 added this function to change the save game 'info'
+
+    if (compare (ev[1], "set_save_game_info"))
       {
 	h = &h[strlen (ev[1])];
-	int p[20] = { 2, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
+	int p[20] = { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 	if (get_parms (ev[1], script, h, p))
 	  {
-	    add_item (slist[0], nlist[1], nlist[2], true);
+	    strcpy (save_game_info, slist[0]);
 	  }
 	strcpy (s, h);
 	return (0);
       }
-    if (compare (ev[1], "kill_this_item"))
+//redink1 added this function to show the item screen
+
+    if (compare (ev[1], "show_inventory"))
       {
 	h = &h[strlen (ev[1])];
-	int p[20] = { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
-	if (get_parms (ev[1], script, h, p))
-	  {
-	    kill_cur_item_script (slist[0]);
-	  }
+	item_screen = true;
 	strcpy (s, h);
 	return (0);
       }
[...]
+//redink1
+
+    if (compare (ev[1], "sp_custom"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 2, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p) && spr[nlist[1]].active == TRUE)
+	  {
+	    if (nlist[1] < 1 || spr[nlist[1]].active == false)
+	      {
+		returnint = -1;
+	      }
+	    else
+	      {
+// If key doesn't exist, create it.
+
+		if (spr[nlist[1]].custom->find (slist[0]) ==
+		    spr[nlist[1]].custom->end ())
+		  {
+// spr[nlist[1]].custom->insert( std::make_pair( slist[0], 0 ) );
+
+		  }
+// Set the value
+
+		if (nlist[2] != -1)
+		  {
+		    spr[nlist[1]].custom->erase (slist[0]);
+// spr[nlist[1]].custom->insert( std::make_pair( slist[0], nlist[2] ) );
+
+		  }
+		returnint = spr[nlist[1]].custom->find (slist[0])->second;
+	      }
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1
+
+    if (compare (ev[1], "sp_blood_seq"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    change_sprite (nlist[0], nlist[1], &spr[nlist[0]].bloodseq);
+	    returnint = spr[nlist[0]].bloodseq;
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1
+
+    if (compare (ev[1], "sp_blood_num"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    change_sprite (nlist[0], nlist[1], &spr[nlist[0]].bloodnum);
+	    returnint = spr[nlist[0]].bloodseq;
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1 added to get index of specified item
+
+    if (compare (ev[1], "get_item"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    returnint = 0;
+	    for (int i = 1; i < 17; i++)
+	      {
+		if (play.item[i].active)
+		  {
+		    if (compare (play.item[i].name, slist[0]))
+		      {
+			returnint = i;
+			break;
+		      }
+		  }
+	      }
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1 added to get index of specified magic spell
+
+    if (compare (ev[1], "get_magic"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    returnint = 0;
+	    for (int i = 1; i < 9; i++)
+	      {
+		if (play.mitem[i].active)
+		  {
+		    if (compare (play.mitem[i].name, slist[0]))
+		      {
+			returnint = i;
+			break;
+		      }
+		  }
+	      }
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1 clip stuff
+
+    if (compare (ev[1], "sp_clip_left"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    change_sprite (nlist[0], nlist[1], &spr[nlist[0]].alt.left);
+	    returnint = spr[nlist[0]].alt.left;
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1 clip stuff
+
+    if (compare (ev[1], "sp_clip_top"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    change_sprite (nlist[0], nlist[1], &spr[nlist[0]].alt.top);
+	    returnint = spr[nlist[0]].alt.top;
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1 clip stuff
+
+    if (compare (ev[1], "sp_clip_right"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    change_sprite (nlist[0], nlist[1], &spr[nlist[0]].alt.right);
+	    returnint = spr[nlist[0]].alt.right;
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1 clip stuff
+
+    if (compare (ev[1], "sp_clip_bottom"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    change_sprite (nlist[0], nlist[1], &spr[nlist[0]].alt.bottom);
+	    returnint = spr[nlist[0]].alt.bottom;
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1 added so users can check truecolor or not
+
+    if (compare (ev[1], "get_truecolor"))
+      {
+	h = &h[strlen (ev[1])];
+	returnint = truecolor;
+	strcpy (s, h);
+	return (0);
+      }
+//redink1 added so developers can change or see what tile is at any given position
+
+    if (compare (ev[1], "map_tile"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+//Yeah... they can only modify valid tiles
+
+	    if (nlist[0] > 0 && nlist[0] <= 96)
+	      {
+//Only change the value if it is greater than 0...
+
+		if (nlist[1] > 0)
+		  {
+		    pam.t[nlist[0] - 1].num = nlist[1];
+		  }
+		returnint = pam.t[nlist[0] - 1].num;
+		return (0);
+	      }
+	  }
+	returnint = -1;
+	return (0);
+      }
+//redink1 added so a developer can retrieve/modify a hard tile
+
+    if (compare (ev[1], "map_hard_tile"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+//Yeah... they can only modify valid tiles
+
+	    if (nlist[0] > 0 && nlist[0] <= 96)
+	      {
+//Only change the value if it is greater than 0...
+
+		if (nlist[1] > 0)
+		  {
+		    pam.t[nlist[0] - 1].althard = nlist[1];
+		  }
+		returnint = pam.t[nlist[0] - 1].althard;
+		return (0);
+	      }
+	  }
+	returnint = -1;
+	return (0);
+      }
[...]
+    if (compare (ev[1], "set_callback_random"))
+      {
+	Msg ("setting callback random");
+	h = &h[strlen (ev[1])];
+	int p[20] = { 2, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    int cb = add_callback (slist[0], nlist[1], nlist[2], script);
+//got all parms, let do it
+
+	    returnint = cb;
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+// redink1 added
+
+    if (compare (ev[1], "callback_kill"))
+      {
+	Msg ("setting callback random");
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    if (nlist[0] >= 0 && nlist[0] <= 99)
+	      {
+		callback[nlist[0]].active = false;
+	      }
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+    if (compare (ev[1], "set_dink_speed"))
+      {
+	Msg ("setting callback random");
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p) && nlist[0] != 0)
+	  {
+	    dinkspeed = nlist[0];
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+//redink1
+
+    if (compare (ev[1], "set_dink_base_push"))
+      {
+	Msg ("setting callback random");
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    mDinkBasePush = nlist[0];
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+    if (compare (ev[1], "reset_timer"))
+      {
+	h = &h[strlen (ev[1])];
+	time (&time_start);
+	play.minutes = 0;
+	strcpy (s, h);
+	return (0);
+      }
+    if (compare (ev[1], "set_keep_mouse"))
+      {
+	Msg ("setting callback random");
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    keep_mouse = nlist[0];
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+    if (compare (ev[1], "add_item"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 2, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    add_item (slist[0], nlist[1], nlist[2], false);
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+    if (compare (ev[1], "add_exp"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    add_exp (nlist[0], nlist[1], true);
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+    if (compare (ev[1], "add_magic"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 2, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    add_item (slist[0], nlist[1], nlist[2], true);
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+    if (compare (ev[1], "kill_this_item"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    kill_cur_item_script (slist[0]);
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+    if (compare (ev[1], "kill_this_magic"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    kill_cur_magic_script (slist[0]);
+	  }
+	strcpy (s, h);
+	return (0);
+      }
+    if (compare (ev[1], "show_bmp"))
+      {
+	Msg ("showing BMP");
+	h = &h[strlen (ev[1])];
+	int p[20] = { 2, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
 	if (get_parms (ev[1], script, h, p))
 	  {
 	    wait.active = false;
@@ -8297,6 +9564,10 @@
 
 	update_screen_time ();
 	load_map (map.loc[*pmap]);
+//redink1 fix for correct indicator on mini-map
+
+	if (map.indoor[*pmap] == 0)
+	  play.last_map = *pmap;
 	return (0);
       }
     if (compare (ev[1], "choice_start"))
@@ -8641,3 +9908,20 @@
+//redink1 added
+
+    if (compare (ev[1], "loopmidi"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    if (nlist[0] > 0)
+	      {
+		mLoopMidi = true;
+	      }
+	    else
+	      {
+		mLoopMidi = false;
+	      }
+	  }
       }
     if (compare (ev[1], "playmidi"))
       {
@@ -9210,6 +10542,29 @@
 	returnint = 0;
 	return (0);
       }
+//redink1 added this to make Paul Pliska's life more fulfilling
+
+    if (compare (ev[1], "get_next_sprite_with_this_brain"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    for (int i = nlist[2]; i <= last_sprite_created; i++)
+	      {
+		if ((spr[i].brain == nlist[0]) && (i != nlist[1]))
+		  if (spr[i].active == 1)
+		    {
+		      Msg ("Ok, sprite with brain %d is %d", nlist[0], i);
+		      returnint = i;
+		      return (0);
+		    }
+	      }
+	  }
+	Msg ("Ok, sprite with brain %d is 0", nlist[0], i);
+	returnint = 0;
+	return (0);
+      }
     if (compare (ev[1], "get_rand_sprite_with_this_brain"))
       {
 	h = &h[strlen (ev[1])];
@@ -9680,6 +11035,25 @@
 	returnint = -1;
 	return (0);
       }
+    if (compare (ev[1], "set_smooth_follow"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    if (nlist[0] == 0)
+	      {
+		smooth_follow = false;
+	      }
+	    else if (nlist[0] == 1)
+	      {
+		smooth_follow = true;
+	      }
+	    return (0);
+	  }
+	returnint = -1;
+	return (0);
+      }
     if (compare (ev[1], "sp_frame"))
       {
 	h = &h[strlen (ev[1])];
@@ -9712,6 +11086,10 @@
 	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
 	if (get_parms (ev[1], script, h, p))
 	  {
+//redink1 fix for freeze if hurt value is less than 0
+
+	    if (nlist[1] < 0)
+	      return (0);
 	    if (hurt_thing (nlist[0], nlist[1], 0) > 0)
 	      random_blood (spr[nlist[0]].x, spr[nlist[0]].y - 40, nlist[0]);
 	    if (spr[nlist[0]].nohit != 1)
@@ -9719,7 +11097,12 @@
 		if (locate (spr[nlist[0]].script, "HIT"))
 		  {
 		    if (rinfo[script]->sprite != 1000)
+		      {
 		      *penemy_sprite = rinfo[script]->sprite;
+//redink1 addition of missle_source stuff
+
+			*pmissle_source = rinfo[script]->sprite;
+		      }
 		    kill_returning_stuff (spr[nlist[0]].script);
 		    run_script (spr[nlist[0]].script);
 		  }
@@ -9802,10 +11185,14 @@
 	int p[20] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 	if (get_parms (ev[1], script, h, p))
 	  {
+	    if (nlist[0] == 0 || nlist[0] == 1)
+	      {
 	    screenlock = nlist[0];
-	    return (0);
 	  }
-	returnint = -1;
+	  }
+//redink1 - set screenlock() to return the screenlock value
+
+	returnint = screenlock;
 	return (0);
       }
     if (compare (ev[1], "stop_entire_game"))
@@ -9925,6 +11312,17 @@
 	returnint = -1;
 	return (0);
       }
+    if (compare (ev[1], "sp_move_x"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    change_sprite_noreturn (nlist[0], nlist[1], &spr[nlist[0]].mx);
+	    return (0);
+	  }
+	return (0);
+      }
     if (compare (ev[1], "sp_my"))
       {
 	h = &h[strlen (ev[1])];
@@ -9937,6 +11335,17 @@
 	returnint = -1;
 	return (0);
       }
+    if (compare (ev[1], "sp_move_y"))
+      {
+	h = &h[strlen (ev[1])];
+	int p[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
+	if (get_parms (ev[1], script, h, p))
+	  {
+	    change_sprite_noreturn (nlist[0], nlist[1], &spr[nlist[0]].my);
+	    return (0);
+	  }
+	return (0);
+      }
     if (compare (ev[1], "scripts_used"))
       {
 	h = &h[strlen (ev[1])];
@@ -10111,7 +11520,9 @@
 	      {
 		return (0);
 	      }
-	    if (compare (play.item[*pcur_magic].name, slist[0]))
+//redink1 fix so compare_magic works!
+
+	    if (compare (play.mitem[*pcur_magic].name, slist[0]))
 	      {
 		returnint = 1;
 	      }
@@ -10545,4 +12026,86 @@
 	    }
     }
 }
+
+//redink1 added for font colors
+
+void
+init_font_colors (void)
+{
+//Light Magenta
+
+  font_colors[1].red = 255;
+  font_colors[1].green = 198;
+  font_colors[1].blue = 255;
+//Dark Green
+
+  font_colors[2].red = 131;
+  font_colors[2].green = 181;
+  font_colors[2].blue = 74;
+//Bold Cyan
+
+  font_colors[3].red = 99;
+  font_colors[3].green = 242;
+  font_colors[3].blue = 247;
+//Orange
+
+  font_colors[4].red = 255;
+  font_colors[4].green = 156;
+  font_colors[4].blue = 74;
+//Magenta
+
+  font_colors[5].red = 222;
+  font_colors[5].green = 173;
+  font_colors[5].blue = 255;
+//Brown Orange
+
+  font_colors[6].red = 244;
+  font_colors[6].green = 188;
+  font_colors[6].blue = 73;
+//Light Gray
+
+  font_colors[7].red = 173;
+  font_colors[7].green = 173;
+  font_colors[7].blue = 173;
+//Dark Gray
+
+  font_colors[8].red = 85;
+  font_colors[8].green = 85;
+  font_colors[8].blue = 85;
+//Sky Blue
+
+  font_colors[9].red = 148;
+  font_colors[9].green = 198;
+  font_colors[9].blue = 255;
+//Bright Green
+
+  font_colors[10].red = 0;
+  font_colors[10].green = 255;
+  font_colors[10].blue = 0;
+//Yellow
+
+  font_colors[11].red = 255;
+  font_colors[11].green = 255;
+  font_colors[11].blue = 2;
+//Yellow
+
+  font_colors[12].red = 255;
+  font_colors[12].green = 255;
+  font_colors[12].blue = 2;
+//Hot Pink
+
+  font_colors[13].red = 255;
+  font_colors[13].green = 132;
+  font_colors[13].blue = 132;
+//Yellow
+
+  font_colors[14].red = 255;
+  font_colors[14].green = 255;
+  font_colors[14].blue = 2;
+//White
+
+  font_colors[15].red = 255;
+  font_colors[15].green = 255;
+  font_colors[15].blue = 255;
+}
 #endif

Cross-compilation # -*- shell-script -*-
=================

TODO: put all source tarballs in a directory that will be distributed
along with static binaries, to comply with the GNU GPL and LGPL


# Install a cross-compiler version of GCC
aptitude install mingw32


# Prepare directory to store cross-compiled libraries
mkdir -p -m 775 /usr/local/cross-tools/i386-mingw32msvc
cd /usr/local/cross-tools
ln -s i386-mingw32msvc i386-mingw32

##
# Install precompiled SDL binaries
##

VERSION=1.2.13
# Cf. http://libsdl.org/download-1.2.php
wget http://libsdl.org/release/SDL-devel-$VERSION-mingw32.tar.gz
tar xzf SDL-devel-$VERSION-mingw32.tar.gz
mv SDL-$VERSION/* i386-mingw32msvc/
rmdir SDL-$VERSION

# Install precompiled SDL_mixer binaries
VERSION=1.2.8
wget http://libsdl.org/projects/SDL_mixer/release/SDL_mixer-devel-$VERSION-VC8.zip
unzip SDL_mixer-devel-$VERSION-VC8.zip
cp -r SDL_mixer-$VERSION/include/* i386-mingw32msvc/include/SDL/
cp -r SDL_mixer-$VERSION/lib/* i386-mingw32msvc/lib/
rm -rf SDL_mixer-$VERSION/

# Install precompiled SDL_ttf binaries
VERSION=2.0.9
wget http://libsdl.org/projects/SDL_ttf/release/SDL_ttf-devel-$VERSION-VC8.zip
unzip SDL_ttf-devel-$VERSION-VC8.zip
cp -r SDL_ttf-$VERSION/include/* i386-mingw32msvc/include/SDL/
cp -r SDL_ttf-$VERSION/lib/* i386-mingw32msvc/lib/
rm -rf SDL_ttf-$VERSION/

# (Install precompiled SDL_image binaries)
VERSION=1.2.6
wget http://libsdl.org/projects/SDL_image/release/SDL_image-devel-$VERSION-VC8.zip
unzip SDL_image-devel-$VERSION-VC8.zip
cp -r SDL_image-$VERSION/include/* i386-mingw32msvc/include/SDL/
\cp -r SDL_image-$VERSION/lib/* i386-mingw32msvc/lib/
rm -rf SDL_image-$VERSION/

# Cross-compile SDL_gfx (no binaries available)
VERSION=2.0.16
cd /usr/src
wget http://www.ferzkopp.net/Software/SDL_gfx-2.0/SDL_gfx-$VERSION.tar.gz
tar xzf SDL_gfx-$VERSION.tar.gz
cd SDL_gfx-$VERSION
# Refresh and mark as DLL-compliant (patch sent)
rm -f acinclude.m4
sed -i -e 's/-version-info/-no-undefined -version-info/' Makefile.am
autoreconf --force --install --symlink
patch -p1 < /tmp/SDL_gfx-libtool.diff # see below
SDL_CONFIG=/usr/local/cross-tools/i386-mingw32msvc/bin/sdl-config \
  ./configure --host=i586-mingw32msvc --build=i686-pc-linux-gnu
make
make install


##
# Cross-compile FreeDink
##
cd ~/freedink/
mkdir cross
cd cross/
SDL_CONFIG=/usr/local/cross-tools/i386-mingw32msvc/bin/sdl-config \
  ../configure --host=i586-mingw32msvc --build=i686-pc-linux-gnu
make clean # just in case
make
make install-strip DESTDIR=/tmp/distribute/



Alternative: cross-compile yourself
===================================

Among others, necessary for static builds (no static libraries are
provided with the official releases).

# SDL
VERSION=1.2.13
cd /usr/src/
# Get DX headers
# TODO: maybe it'd be legally cleaner to use those from libwine-dev?
wget http://www.libsdl.org/extras/win32/common/directx-devel.tar.gz
tar xzf directx-devel.tar.gz -C /usr/local/cross-tools/i386-mingw32msvc/
wget http://libsdl.org/release/SDL-$VERSION.tar.gz
tar xzf SDL-$VERSION.tar.gz
cd SDL-$VERSION
CPPFLAGS="-I /usr/local/cross-tools/i386-mingw32msvc/include" \
  ./configure --host=i586-mingw32msvc --build=i686-pc-linux-gnu
# if you don't want stdout.txt and stderr.txt to be created:
#  --disable-stdio-redirect
# note: no need for -L, mingw already has libdsound.a, etc.
make
make install # /usr/local/cross-tools/i386-mingw32/ by default

# SDL_mixer
VERSION=1.2.8
cd /usr/src/
wget http://libsdl.org/projects/SDL_mixer/release/SDL_mixer-$VERSION.tar.gz
tar xzf SDL_mixer-$VERSION.tar.gz
cd SDL_mixer-$VERSION
# Disable MP3 support (not needed in FreeDink and avoid a dependency)
SDL_CONFIG=/usr/local/cross-tools/i386-mingw32msvc/bin/sdl-config ./configure \
  --host=i586-mingw32msvc --build=i686-pc-linux-gnu \
  --disable-music-mp3
make
make install # /usr/local/cross-tools/i386-mingw32/ by default

# FreeType (SDL_ttf dependency)
VERSION=2.3.5
cd /usr/src/
wget http://download.savannah.gnu.org/releases/freetype/freetype-$VERSION.tar.bz2
tar xjf freetype-$VERSION.tar.bz2
cd freetype-$VERSION
# Enable bytecode interpreter, that's what distros use most, and we
# need it for compatibility in font metrics. It's disabled by default
# for fear of patent attacks.
# Check:
# - http://freetype.org/patents.html
# - http://bugs.debian.org/447801
# - freetype-2.3.5/docs/TRUETYPE
sed -i -e 's,/\* #define TT_CONFIG_OPTION_BYTECODE_INTERPRETER \*/,#define TT_CONFIG_OPTION_BYTECODE_INTERPRETER,' \
    include/freetype/config/ftoption.h
./configure --host=i586-mingw32msvc --build=i686-pc-linux-gnu --prefix=/usr/local/cross-tools/i386-mingw32msvc
make
make install

# SDL_ttf
VERSION=2.0.9
cd /usr/src/
wget http://libsdl.org/projects/SDL_ttf/release/SDL_ttf-$VERSION.tar.gz
tar xzf SDL_ttf-$VERSION.tar.gz
cd SDL_ttf-$VERSION
SDL_CONFIG=/usr/local/cross-tools/i386-mingw32msvc/bin/sdl-config \
  FREETYPE_CONFIG=/usr/local/cross-tools/i386-mingw32msvc/bin/freetype-config \
  ./configure --host=i586-mingw32msvc --build=i686-pc-linux-gnu
make
make install # /usr/local/cross-tools/i386-mingw32/ by default

# SDL_gfx
#(see previous section)

# SDL_image - dep1: JPEG
cd /usr/src/
wget http://www.ijg.org/files/jpegsrc.v6b.tar.gz
tar xzf jpegsrc.v6b.tar.gz
cd jpeg-6b
CC=i586-mingw32msvc-gcc RANLIB=i586-mingw32msvc-ranlib \
  ./configure \
  --host=i586-mingw32msvc --build=i686-pc-linux-gnu \
  --prefix=/usr/local/cross-tools/i386-mingw32msvc
make
make install-lib
# Shared build: would need to reliboolize, recreate configure.ac. The
# sources from Debian do not appear to support cross-compilation to
# mingw either.
#  --enable-shared
## Need to do a lot of things manually:
#CC=i586-mingw32msvc-gcc RANLIB=i586-mingw32msvc-ranlib \
#  ./ltconfig ltmain.sh i586-mingw32msvc
##(From the Debian package:)
#cat <<'EOF' > libtool
##!/bin/bash
#exec libtool "$@"
#EOF
#chmod 755 libtool
##ln -fs /usr/share/libtool/ltmain.sh
#make
#make install

# TODO: libpng and libtiff
# http://www.libpng.org/pub/png/libpng.html
# http://www.remotesensing.org/libtiff/

# SDL_image
# (not used now, but may be in the future)
VERSION=1.2.6
cd /usr/src/
wget http://libsdl.org/projects/SDL_image/release/SDL_image-$VERSION.tar.gz
tar xzf SDL_image-$VERSION.tar.gz
cd SDL_image-$VERSION
SDL_CONFIG=/usr/local/cross-tools/i386-mingw32msvc/bin/sdl-config \
  CPPFLAGS="-I /usr/local/cross-tools/i386-mingw32msvc/include" \
  ./configure \
  --host=i586-mingw32msvc --build=i686-pc-linux-gnu
make
make install # /usr/local/cross-tools/i386-mingw32/ by default


Static build
============

I want to cross-compile statically, to provide a single .exe that
includes SDL and SDL_* :)

- You specify -static

- You add -lwinmm

i586-mingw32msvc-gcc mousetest.c \
  `/usr/local/cross-tools/i386-mingw32msvc/bin/sdl-config --cflags \
  --static-libs` -lwinmm

- If you have some troubles with SDL_gfx which tries to use
  __imp__SDL_setFramerate, you need a build system patch (see below) -
  maybe it will make it to 2.0.17 ;)

- You add -lfreetype, a dependency of SDL_ttf

You get a 1.1MB standalone stripped executable.

Now directly available with:
SDL_CONFIG=/usr/local/cross-tools/i386-mingw32msvc/bin/sdl-config \
   ../configure --host=i586-mingw32msvc --build=i686-pc-linux-gnu \
   --enable-static


Misc
====

Those may be used later on.

# zlib
VERSION=1.2.3
wget http://www.gzip.org/zlib/zlib-$VERSION.tar.gz
CC=i586-mingw32msvc-gcc LD=i586-mingw32msvc-ld \
  AR="i586-mingw32msvc-ar r" \
  RANLIB="i586-mingw32msvc-ranlib" \
  ./configure --prefix=/usr/local/cross-tools/i386-mingw32msvc
make
make install
# TODO: --shared doesn't work, it says I should not set CC - but I
# need it for cross-compilation. Then they say we should try libtool -
# how about using it directly then? ;)


# pkgconfig (used to integrate ziplib and zzip in the build system)
VERSION=0.22
wget http://pkgconfig.freedesktop.org/releases/pkg-config-$VERSION.tar.gz
./configure --prefix=/usr/local/cross-tools/i386-mingw32msvc
make
make install
ln -s /usr/local/cross-tools/i386-mingw32msvc/bin/pkg-config \
  /usr/local/bin/i586-mingw32msvc-pkg-config
# or set
# PKG_CONFIG=/usr/local/cross-tools/i386-mingw32msvc/bin/pkg-config


# zziplib
wget http://dfn.dl.sourceforge.net/sourceforge/zziplib/zziplib-0.12.83.tar.bz2
CPPFLAGS="-I/usr/local/cross-tools/i386-mingw32msvc/include" \
  LDFLAGS="-L/usr/local/cross-tools/i386-mingw32msvc/lib" \
  ./configure --host=i586-mingw32msvc --build=i686-pc-linux-gnu \
    --prefix=/usr/local/cross-tools/i386-mingw32msvc
# avoid compiling bins/ which has compilation errors:
cd i586-pc-mingw32msvc/zzip
make
make install

wget http://ovh.dl.sourceforge.net/sourceforge/zziplib/zziplib-0.13.49.tar.bz2
# --disable-mmap because of compilation errors in zzip/mmapped.c
CPPFLAGS="-I/usr/local/cross-tools/i386-mingw32msvc/include" \
  LDFLAGS="-L/usr/local/cross-tools/i386-mingw32msvc/lib" \
  ./configure --host=i586-mingw32msvc --build=i686-pc-linux-gnu \
    --prefix=/usr/local/cross-tools/i386-mingw32msvc --disable-mmap
make
# => doesn't work, it tries to use ftello which is apparently missing from mingw


# libzip
VERSION=0.8
wget http://www.nih.at/libzip/libzip-$VERSION.tar.gz
CPPFLAGS="-I/usr/local/cross-tools/i386-mingw32msvc/include" \
  LDFLAGS="-L/usr/local/cross-tools/i386-mingw32msvc/lib" \
  ./configure --host=i586-mingw32msvc --build=i686-pc-linux-gnu \
    --prefix=/usr/local/cross-tools/i386-mingw32msvc
sed -i -e 's/@LIBOBJS@/@LTLIBOBJS@/' lib/Makefile.am
make
make install

diff -ru SDL_gfx-2.0.16/SDL_framerate.h SDL_gfx-2.0.16.beuc/SDL_framerate.h
--- SDL_gfx-2.0.16/SDL_framerate.h	2006-12-22 13:36:10.000000000 +0100
+++ SDL_gfx-2.0.16.beuc/SDL_framerate.h	2007-09-27 01:46:10.000000000 +0200
@@ -39,21 +39,24 @@
 /* --------- Function prototypes */
 
 #ifdef WIN32
-#ifdef BUILD_DLL
-#define DLLINTERFACE __declspec(dllexport)
-#else
-#define DLLINTERFACE __declspec(dllimport)
+#  ifdef DLL_EXPORT
+#    define SDL_FRAMERATE_SCOPE __declspec(dllexport)
+#  else
+#    ifdef LIBSDL_GFX_DLL_IMPORT
+#      define SDL_FRAMERATE_SCOPE __declspec(dllimport)
+#    endif
+#  endif
 #endif
-#else
-#define DLLINTERFACE
+#ifndef SDL_FRAMERATE_SCOPE
+#  define SDL_FRAMERATE_SCOPE extern
 #endif
 
 /* Functions return 0 or value for sucess and -1 for error */
 
-    DLLINTERFACE void SDL_initFramerate(FPSmanager * manager);
-    DLLINTERFACE int SDL_setFramerate(FPSmanager * manager, int rate);
-    DLLINTERFACE int SDL_getFramerate(FPSmanager * manager);
-    DLLINTERFACE void SDL_framerateDelay(FPSmanager * manager);
+    SDL_FRAMERATE_SCOPE void SDL_initFramerate(FPSmanager * manager);
+    SDL_FRAMERATE_SCOPE int SDL_setFramerate(FPSmanager * manager, int rate);
+    SDL_FRAMERATE_SCOPE int SDL_getFramerate(FPSmanager * manager);
+    SDL_FRAMERATE_SCOPE void SDL_framerateDelay(FPSmanager * manager);
 
 /* --- */
 
diff -ru SDL_gfx-2.0.16/SDL_rotozoom.h SDL_gfx-2.0.16.beuc/SDL_rotozoom.h
--- SDL_gfx-2.0.16/SDL_rotozoom.h	2006-12-22 13:36:10.000000000 +0100
+++ SDL_gfx-2.0.16.beuc/SDL_rotozoom.h	2007-09-27 01:45:58.000000000 +0200
@@ -45,13 +45,16 @@
 /* ---- Prototypes */
 
 #ifdef WIN32
-#ifdef BUILD_DLL
-#define DLLINTERFACE __declspec(dllexport)
-#else
-#define DLLINTERFACE __declspec(dllimport)
+#  ifdef DLL_EXPORT
+#    define SDL_ROTOZOOM_SCOPE __declspec(dllexport)
+#  else
+#    ifdef LIBSDL_GFX_DLL_IMPORT
+#      define SDL_ROTOZOOM_SCOPE __declspec(dllimport)
+#    endif
+#  endif
 #endif
-#else
-#define DLLINTERFACE
+#ifndef SDL_ROTOZOOM_SCOPE
+#  define SDL_ROTOZOOM_SCOPE extern
 #endif
 
 /* 
@@ -65,17 +68,17 @@
 
 */
 
-    DLLINTERFACE SDL_Surface *rotozoomSurface(SDL_Surface * src, double angle, double zoom, int smooth);
+    SDL_ROTOZOOM_SCOPE SDL_Surface *rotozoomSurface(SDL_Surface * src, double angle, double zoom, int smooth);
 
-    DLLINTERFACE SDL_Surface *rotozoomSurfaceXY
+    SDL_ROTOZOOM_SCOPE SDL_Surface *rotozoomSurfaceXY
     (SDL_Surface * src, double angle, double zoomx, double zoomy, int smooth);
 
 /* Returns the size of the target surface for a rotozoomSurface() call */
 
-    DLLINTERFACE void rotozoomSurfaceSize(int width, int height, double angle, double zoom, int *dstwidth,
+    SDL_ROTOZOOM_SCOPE void rotozoomSurfaceSize(int width, int height, double angle, double zoom, int *dstwidth,
 					  int *dstheight);
 
-    DLLINTERFACE void rotozoomSurfaceSizeXY
+    SDL_ROTOZOOM_SCOPE void rotozoomSurfaceSizeXY
     (int width, int height, double angle, double zoomx, double zoomy, 
      int *dstwidth, int *dstheight);
 
@@ -90,11 +93,11 @@
 
 */
 
-    DLLINTERFACE SDL_Surface *zoomSurface(SDL_Surface * src, double zoomx, double zoomy, int smooth);
+    SDL_ROTOZOOM_SCOPE SDL_Surface *zoomSurface(SDL_Surface * src, double zoomx, double zoomy, int smooth);
 
 /* Returns the size of the target surface for a zoomSurface() call */
 
-    DLLINTERFACE void zoomSurfaceSize(int width, int height, double zoomx, double zoomy, int *dstwidth, int *dstheight);
+    SDL_ROTOZOOM_SCOPE void zoomSurfaceSize(int width, int height, double zoomx, double zoomy, int *dstwidth, int *dstheight);
 
 
 /* 
@@ -107,7 +110,7 @@
     or 32bit RGBA/ABGR it will be converted into a 32bit RGBA format on the fly.
 */     
     
-    DLLINTERFACE SDL_Surface *shrinkSurface(SDL_Surface * src, int factorx, int factory);
+    SDL_ROTOZOOM_SCOPE SDL_Surface *shrinkSurface(SDL_Surface * src, int factorx, int factory);
 
 /* Ends C function definitions when using C++ */
 #ifdef __cplusplus

Current we need to:

- implement setFrequency

keywords:
"PCM", "DSP" and "pitch-shift" (possibly in combination with "C++")
http://www.devolution.com/pipermail/sdl/2004-October/065449.html

Note: http://www.dspdimension.com/index.html?timepitch.html#intro
suggests that "pitch shift" actually means something different, and
that what we're trying to achieve is just "sample rate conversion".


I don't think that actually can be done in SDL_Mixer. Rationale (may
be wrong): I want to play a sound a looooow speed. I then need more
time, so a longer sample. The sample I'm given when developping a mix
effect has a fixed length, or at least I can't modify it. So my sound
will most likely be truncated. So much for SDL_Mixer.

However, SDL_Mixer is good for background (MIDIs and audio CDs - it's
rare to find something to read audio CDs). So we should try to use it
in combination with OpenAL (or Allegro (or...)).

 * Or switch to Allegro and keep SDL for audio CDs only (or disable
   audio CDs support)

 * Or switch to OpenAL and keep SDL_Mixer (Allegro?) only for MIDIs.

 * Or use SDL_sound to convert MIDIs to WAVs and always software-play
   them.


- Function to convert volume and panning from dB to the unit we'll use

(DinkC's sound_set_vol(), SetVolume() and SetPan() in the code)

sound_set_vol(): "The volume should be negative or zero. 0 is no
change, -1000 is about half-volume, and -10000 is extremely quiet."

Formula (keywords: dsp decibel dB volume):

 20*log10 (x/max_vol) ~> y (dB)
 ex: 20*log10 (80/128) ~> -4dB
 128: max value for a sound; SDL uses 128
 80: sound value in the WAV file
 -4dB: attenuation in decibel

In SDL, the volume is just a linear scaling (80 means something like
"multiply all sound values by 80/128)

So we need the opposite formula to get 80 from -4dB:
 x = max_vol.10^(y/20)

Ex: -1000 (hundreds of dB) => x = 128.10(^-10/20) =~ 40.

Note: -10dB should be half volume, so why isn't it 128/2 + 64? It's
because the human-ear-perceived volume is the _square_ of the sound
value.


Panning: according to the DX documentation, SetPan(x) uses a dB
attenuation; left channel attenuation when positive, right channel
attenuation when negative. x ranges from -10000 to 10000.

So at first glance:
SetPan(-1000) => Mix_SetPanning(n, 255, 255.10(^-10/20))
SetPan(3000) => Mix_SetPanning(n, 255.10(^-30/20), 255)


- separate initsound from sfx - it's sfx+bgm

- If 100X is played, and if there's no CD, and if 100X.mid doesn't
  exist, I think the original game will play X.mid. Take that into
  account.

Note:

- soundplayeffect returns a non-0 bank number; it's used by DinkC's
  playsound(). Beware!



TiMidity++
==========

I never managed to use my sound card in MIDI mode with GNU/Linux -
however there is a program called TiMidity++ that is a MIDI->WAV
translator (software-based MIDI playing, rather than hardware-based).

SDL uses TiMidity++ automatically.

TiMidity++ by itself cannot play MIDIs, he needs a set of "patches",
which are data files defining how to reproduce the instrument
specified by the MIDI file. Once you get the patches, you also need a
configuration file, usually provided separately.

Apparently there are 2 patches set worthy to mention:

- freepats: free-as-in-freedom, included in Debian (so compatible with
  the DFSG, the Debian Free Software Guidelines).

- eawpatches: best quality but apparently non-free, and pretty hard to
  find (TiMidity++ is surrounded by 404 pages :/). The free parts of
  eawpatches are included in freepats.

  There is a copy in the NetBSD package:
  ftp://ftp.netbsd.org/pub/NetBSD/packages/pkgsrc/audio/eawpatches/README.html
  ftp://ftp.netbsd.org/pub/pkgsrc/packages/NetBSD/alpha/2.1_2006Q3/All/eawpatches-12nb1.tgz

  SDL_Mixer also has a copy: http://www.libsdl.org/projects/SDL_mixer/
  http://www.libsdl.org/projects/SDL_mixer/timidity/timidity.tar.gz

Here is what I did to install the eawpatches from the NetBSD port to
Debian GNU/Linux Etch. First I installed the patch in the
FHS-compliant location (I checked where freepats was installed using
dpkg -L freepats):

  tar xzf eawpatches-12nb1.tgz
  mv share/eawpatches/ /usr/share/midi/

I then edited /etc/timidity/timidity.cfg:
  source /usr/share/midi/eawpatches/timidity.cfg
and /usr/share/midi/eawpatches/timidity.cfg:
  dir /usr/share/midi/eawpatches

Now you can play your favorite MIDIs decently :)
  timidity dink/Sound/dance.mid


The NetBSD documentation (in file '+DISPLAY') mentions you can test
patch files with command line options instead of messing with the
site-wide default configuration file:

  timidity -L /usr/pkg/share/eawpatches -c timidity.cfg file.mid


Another sum-up page: http://alleg.sourceforge.net/digmid.html

I tried to install the Gravis Pro patches along with the provided
configuration file, but I didn't manage to get something playing.

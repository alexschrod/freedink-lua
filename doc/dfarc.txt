DFArc2 is the name of v108's default frontend to launch Dink and
DMods. It includes codes from DFArc15 which introduces the .dmod
format and is "just" an archiver/extrator, without a front-end part.


The code
========

The code contains a few #ifndef _WIN32 and use the portable wxWidgets
GUI toolkit, which let us hope it will compile under GNU/Linux - but
it also uses Win32-specific constructs (eg in DFArcFrame.cpp), so it
will need a bit a clean-up to be portable. My guess is that merlin's
version (DFArc15) was portable, but redink1's additions are not. As a
side note, DFArc15 is using FLTK, while DFArc2 is using wxWidgets.

I tried compiling DFArc15 with 'g++ *.cpp' - it fails with a few
mistakes, probably missing includes and deprecation warnings. I also
tried compiling DFArc2 with 'g++ *.cpp `wx-config --cxxflags`' - it
triggers lots of "ambiguous overload for 'operator='" errors and uses
the Win32 API unconditionaly; this needs a deeper look.


The copyright
=============

You can find a DFArc15 release at
http://www.dinknetwork.com/file/dfarc/. It includes a source archive
with a copyright+license notices block based on the Berkeley DB
Database license (which, funnily, mentions "THIS SOFTWARE IS PROVIDED
BY SLEEPYCAT SOFTWARE"). Interestingly those notices were all removed
in DFArc2. Before working on the code, we need to make sure this isn't
some license violation (probably a legal mistake, Andrew Reading's is
properly credited in DFArc2 anyway).


.dmod format
============

DFArc introduces .dmod archives, which are similar to .tar.bz2
tarballs. I say "similar" because, unfortunately, the TAR code seems
written from scratch (it does not use a library) and produces archives
that are not completely compatible with POSIX Tar, so extracting those
archives with anything else than DFArc is likely to corrupt
files. BZip2 support, on the other hand, uses the libbz2 2.1.0.3
(that's what is mentioned in the VC++ project file include paths) and
looks clean.

For example:
# Make sure bzip2 is not involved in the corruption:
$ bunzip2 -t marco_polo-v1_00.dmod
# <no error>
# Extract the tar archive:
$ LANG=C tar tjf marco_polo-v1_00.dmod
marco/DEBUG.TXT
tar: Skipping to next header
marco/DINK.DAT
[...]
marco/library.dat
tar: Skipping to next header
marco/MAP.DAT
[...]
marco/TILES/Ts41.bmp
tar: Unexpected EOF in archive

Those errors are not harmless:
# Using GNU Tar:
$ ls -l marco/TILES/Ts41.bmp
-rwxr-xr-x 1 me me 160768 2007-08-22 21:50 marco/TILES/Ts41.bmp
# Using DFArc2:
$ ls -l .wine/drive_c/Program\ Files/Dink\ Smallwood/marco/TILES/Ts41.bmp
-rw-r--r-- 1 me me 161080 2007-08-22 22:26 .wine/drive_c/Program Files/Dink Smallwood/marco/TILES/Ts41.bmp

So not using DFArc2 for extraction may truncate the files. In
particular, I never saw a .dmod that does not trigger a "Unexpected
EOF" error with GNU tar.


With this truncation, Ts41.bmp is still readable by GQView (for
example). However, SDL_LoadBMP is stricter and will refuse to load the
file. Since Ts41.bmp is necessary for the Dink engine to run, the game
engine won't start.


At first I feared that already released .dmod files would contain
corrupted files, so those files may be irremediably lost. Since
apparently DFArc's extrator can handle its encoder's mistakes, we can
contemplate fixing .dmods to make them back valid Tar+BZip2 files
without data loss.


It would be interesting to know whether such corrupted Tar files can
be detected at extraction time - and fixed. This means we could
release a fixed version of DFArc2, and Dinkers could submit proper
.tar.bz2 as .dmod files without worrying about whether they'll be
extractable with DFArc2.

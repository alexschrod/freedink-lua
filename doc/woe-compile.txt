Install MinGW (www.mingw.org) and MSys.

Install Dev-C++ and then MSys. When MSys asks where MinGW is, point it
to the Dev-C++ directory (TODO: MSys now comes only as a tarball with
no installer; I guess it's a matter of mounting /mingw appropriately
in MSys). That way, you can use Dev-C++'s packaging system and
integrate it with MSys.

Get DirectX headers and libraries. There's an archive at:
http://alleg.sourceforge.net/wip.html
http://alleg.sourceforge.net/files/dx70_mgw.zip

I also found dx7libhdr.exe and dx7docs.exe lying on my computer, as
self-extracting zip files; there is nothing letting me think I can
redistribute them, but if you have them, they work.

Get ddutil.c and ddutil.h from the original source code release. Those
are non-free, and there's no reason to believe they can be legally
redistributed.

Use the Makefile.

The .dsw is a workspace, use that to edit it with VC++.

TODO: there is another, cross-platform, free software editor called
Code::Blocks.
http://www.codeblocks.org/
http://gpwiki.org/index.php/C:Development_Environments


Dependencies (SDL*...):
You can either:

- use DevPaks (binary packages). They are original meant for Dev C++
  but Code::Blocks has a plug-in to use them (install them in your
  c:/msys/mingw path or wherever you install the MinGW ports).

- download the SDL binary distribution from libsdl.org (such as
  SDL-devel-1.2.12-mingw32.tar.gz )

- use MinGW's "ports" to get a semi-automated build (similar to a
  Gentoo Ebuild). Be sure to get the wget port first, and manually
  install the included wget.exe to /bin. By default everything is
  installed to /mingw, but you can install to / or wherever you
  install the DevPaks.

- compile them manually from MSys (./configure && make && make
  install)

- compile them from an IDE using the VC++ project file


Seth says the code is dirty. In practice, this means the original code
did not compile with g++, but we fixed those compilation errors.


Make tests. Make tests. Make tests! Since the goal of the project is
to be backward compatible, and since we're up to non-trivially change
the code, we need to check that we didn't introduce
incompatibilities. Regression tests are not easy to perform on an
interactive programs. However, we can test each non-interactive part
independently. For example, we could start a game in memory, change a
few sprite, save the game, the check if the saved game is exactly
(modulo the timestamp) to a saved game generated likewise using the
current Dink version, that is patch dink.exe v1.07.



TODO:
mode is not initialized in dinkvar.h.
It is, I think, first initialized in dink.cpp in doInit().
process_line() from dinkvar.h also set its value.

At a point, mode needs to be properly initialized somewhere, to avoid
"duplicating" the variable in each object file that uses it.

Install MSys and MinGW (www.mingw.org).

In principle, MinGW is installed in /mingw (it's compiled with
--prefix=/mingw). While it can work it installed in /usr or /, /mingw
is the common setup that other people expect, so we'll use that. When
selecting the components, choose at least g++, g77 (apparently and
optionaly used by libSDL) and mingw-make.

Extract the MSys tarball (there used to be an installed, but no I just
extracted msysCORE-1.0.X in C:\msys). Then install MinGW in
C:\msys\mingw.

If you want to install it somewhere else (for example, if you use the
one that comes with Dev-C++ so as to benefit of DevPaks), then run
/postinstall/pi.sh so that msys will tweak /etc/fstab accordingly.

TODO: there is another, cross-platform, free software editor called
Code::Blocks.
http://www.codeblocks.org/
http://gpwiki.org/index.php/C:Development_Environments


Get DX headers and libraries. There's an archive at:
http://alleg.sourceforge.net/wip.html
http://alleg.sourceforge.net/files/dx70_mgw.zip

There's an archive for version 5 from libsdl:
http://www.libsdl.org/extras/win32/common/directx-devel.tar.gz

I also found dx7libhdr.exe and dx7docs.exe lying on my computer, as
self-extracting zip files; there is nothing letting me think I can
redistribute them, but if you have them, they work.


If you compile libSDL manually, it is important to compile it with DX
support to avoid delays when playing sounds. For libSDL to detect DX,
you need to place its headers and libraries in /mingw, so let's
install it there just in case.
http://www.libsdl.org/extras/win32/mingw32/README.txt

You can also compile or grab a binary of nasm
(http://www.libsdl.org/extras/win32/mingw32/nasm.exe) to enable
assembly support in libSDL. Install it in /mingw/bin/.


Get ddutil.c and ddutil.h from the original source code release. Those
are non-free, and there's no reason to believe they can be legally
redistributed.

Use the Makefile.

The .dsw is a workspace, use that to edit it with VC++.

It is adviced to install a woe port of Emacs from
ftp://ftp.gnu.org/gnu/emacs/windows/
(full install, not the -barebin one).


Dependencies (SDL*...):
You can either:

- use DevPaks (binary packages). They are original meant for Dev C++
  but Code::Blocks has a plug-in to use them (install them in your
  c:/msys/mingw path or wherever you install the MinGW ports).

- download the SDL binary distribution from libsdl.org (such as
  SDL-devel-1.2.12-mingw32.tar.gz )

- use MinGW's "ports" to get a semi-automated build (similar to a
  Gentoo Ebuild). Be sure to get the wget port first, and manually
  install the included wget.exe to /bin. By default everything is
  installed to /mingw, but you can install to /usr/local or wherever
  you install the DevPaks.

- compile them manually from MSys (./configure && make && make
  install)

- compile them from an IDE using the VC++ project file

- http://wiki.codeblocks.org/index.php?title=Using_SDL_with_Code::Blocks


Seth says the code is dirty. In practice, this means the original code
did not compile with g++, but we fixed those compilation errors.


Make tests. Make tests. Make tests! Since the goal of the project is
to be backward compatible, and since we're up to non-trivially change
the code, we need to check that we didn't introduce
incompatibilities. Regression tests are not easy to perform on an
interactive programs. However, we can test each non-interactive part
independently. For example, we could start a game in memory, change a
few sprite, save the game, the check if the saved game is exactly
(modulo the timestamp) to a saved game generated likewise using the
current Dink version, that is patch dink.exe v1.07.



TODO:
mode is not initialized in dinkvar.h.
It is, I think, first initialized in dink.cpp in doInit().
process_line() from dinkvar.h also set its value.

At a point, mode needs to be properly initialized somewhere, to avoid
"duplicating" the variable in each object file that uses it.
